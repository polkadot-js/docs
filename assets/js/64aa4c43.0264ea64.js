"use strict";(self.webpackChunkpolkadot_js=self.webpackChunkpolkadot_js||[]).push([[9377],{4137:function(e,a,t){t.d(a,{Zo:function(){return m},kt:function(){return d}});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),o=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},m=function(e){var a=o(e.components);return n.createElement(s.Provider,{value:a},e.children)},k="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),k=o(t),u=r,d=k["".concat(s,".").concat(u)]||k[u]||c[u]||i;return t?n.createElement(d,l(l({ref:a},m),{},{components:t})):n.createElement(d,l({ref:a},m))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=u;var p={};for(var s in a)hasOwnProperty.call(a,s)&&(p[s]=a[s]);p.originalType=e,p[k]="string"==typeof e?e:r,l[1]=p;for(var o=2;o<i;o++)l[o]=t[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7118:function(e,a,t){t.r(a),t.d(a,{assets:function(){return m},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return p},metadata:function(){return o},toc:function(){return k}});var n=t(7462),r=t(3366),i=(t(7294),t(4137)),l=["components"],p={title:"Derives"},s=void 0,o={unversionedId:"derives/derives",id:"derives/derives",title:"Derives",description:"This page lists the derives that can be encountered in the different modules. Designed to simplify the process of querying complex on-chain data by combining multiple RPC calls, storage queries, and runtime logic into a single, callable function.",source:"@site/docs/derives/derives.md",sourceDirName:"derives",slug:"/derives/",permalink:"/docs/derives/",draft:!1,editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/derives/derives.md",tags:[],version:"current",frontMatter:{title:"Derives"},sidebar:"reference",previous:{title:"Errors",permalink:"/docs/asset-hub-polkadot/errors"},next:{title:"Overview",permalink:"/docs/keyring"}},m={},k=[{value:"accounts",id:"accounts",level:2},{value:"accountId",id:"accountid",level:3},{value:"flags",id:"flags",level:3},{value:"idAndIndex",id:"idandindex",level:3},{value:"idToIndex",id:"idtoindex",level:3},{value:"identity",id:"identity",level:3},{value:"hasIdentity",id:"hasidentity",level:3},{value:"hasIdentityMulti",id:"hasidentitymulti",level:3},{value:"indexToId",id:"indextoid",level:3},{value:"indexes",id:"indexes",level:3},{value:"info",id:"info",level:3},{value:"alliance",id:"alliance",level:2},{value:"members",id:"members",level:3},{value:"hasProposals",id:"hasproposals",level:3},{value:"proposal",id:"proposal",level:3},{value:"proposalCount",id:"proposalcount",level:3},{value:"proposalHashes",id:"proposalhashes",level:3},{value:"proposals",id:"proposals",level:3},{value:"prime",id:"prime",level:3},{value:"bagsList",id:"bagslist",level:2},{value:"get",id:"get",level:3},{value:"expand",id:"expand",level:3},{value:"getExpanded",id:"getexpanded",level:3},{value:"listNodes",id:"listnodes",level:3},{value:"balances",id:"balances",level:2},{value:"account",id:"account",level:3},{value:"all",id:"all",level:3},{value:"votingBalance",id:"votingbalance",level:3},{value:"votingBalances",id:"votingbalances",level:3},{value:"bounties",id:"bounties",level:2},{value:"bounties",id:"bounties-1",level:3},{value:"chain",id:"chain",level:2},{value:"bestNumber",id:"bestnumber",level:3},{value:"bestNumberFinalized",id:"bestnumberfinalized",level:3},{value:"bestNumberLag",id:"bestnumberlag",level:3},{value:"getBlock",id:"getblock",level:3},{value:"getBlockByNumber",id:"getblockbynumber",level:3},{value:"getHeader",id:"getheader",level:3},{value:"subscribeFinalizedBlocks",id:"subscribefinalizedblocks",level:3},{value:"subscribeFinalizedHeads",id:"subscribefinalizedheads",level:3},{value:"subscribeNewBlocks",id:"subscribenewblocks",level:3},{value:"subscribeNewHeads",id:"subscribenewheads",level:3},{value:"contracts",id:"contracts",level:2},{value:"fees",id:"fees",level:3},{value:"council",id:"council",level:2},{value:"members",id:"members-1",level:3},{value:"hasProposals",id:"hasproposals-1",level:3},{value:"proposal",id:"proposal-1",level:3},{value:"proposalCount",id:"proposalcount-1",level:3},{value:"proposalHashes",id:"proposalhashes-1",level:3},{value:"proposals",id:"proposals-1",level:3},{value:"prime",id:"prime-1",level:3},{value:"votes",id:"votes",level:3},{value:"votesOf",id:"votesof",level:3},{value:"crowdloan",id:"crowdloan",level:2},{value:"childKey",id:"childkey",level:3},{value:"contributions",id:"contributions",level:3},{value:"ownContributions",id:"owncontributions",level:3},{value:"democracy",id:"democracy",level:2},{value:"dispatchQueue",id:"dispatchqueue",level:3},{value:"locks",id:"locks",level:3},{value:"nextExternal",id:"nextexternal",level:3},{value:"preimages",id:"preimages",level:3},{value:"preimage",id:"preimage",level:3},{value:"proposals",id:"proposals-2",level:3},{value:"referendumIds",id:"referendumids",level:3},{value:"referendums",id:"referendums",level:3},{value:"referendumsActive",id:"referendumsactive",level:3},{value:"referendumsFinished",id:"referendumsfinished",level:3},{value:"referendumsInfo",id:"referendumsinfo",level:3},{value:"sqrtElectorate",id:"sqrtelectorate",level:3},{value:"elections",id:"elections",level:2},{value:"info",id:"info-1",level:3},{value:"imOnline",id:"imonline",level:2},{value:"receivedHeartbeats",id:"receivedheartbeats",level:3},{value:"membership",id:"membership",level:2},{value:"members",id:"members-2",level:3},{value:"hasProposals",id:"hasproposals-2",level:3},{value:"proposal",id:"proposal-2",level:3},{value:"proposalCount",id:"proposalcount-2",level:3},{value:"proposalHashes",id:"proposalhashes-2",level:3},{value:"proposals",id:"proposals-3",level:3},{value:"prime",id:"prime-2",level:3},{value:"parachains",id:"parachains",level:2},{value:"info",id:"info-2",level:3},{value:"overview",id:"overview",level:3},{value:"session",id:"session",level:2},{value:"indexes",id:"indexes-1",level:3},{value:"info",id:"info-3",level:3},{value:"progress",id:"progress",level:3},{value:"eraLenght",id:"eralenght",level:3},{value:"eraProgress",id:"eraprogress",level:3},{value:"sessionProgress",id:"sessionprogress",level:3},{value:"society",id:"society",level:2},{value:"candidate",id:"candidate",level:3},{value:"info",id:"info-4",level:3},{value:"member",id:"member",level:3},{value:"members",id:"members-3",level:3},{value:"staking",id:"staking",level:2},{value:"accounts",id:"accounts-1",level:3},{value:"account",id:"account-1",level:3},{value:"currentPoints",id:"currentpoints",level:3},{value:"electedInfo",id:"electedinfo",level:3},{value:"eraExposure",id:"eraexposure",level:3},{value:"erasExposure",id:"erasexposure",level:3},{value:"erasHistoric",id:"erashistoric",level:3},{value:"erasPoints",id:"eraspoints",level:3},{value:"eraPrefs",id:"eraprefs",level:3},{value:"erasPrefs",id:"erasprefs",level:3},{value:"erasRewards",id:"erasrewards",level:3},{value:"eraSlashes",id:"eraslashes",level:3},{value:"erasSlashes",id:"erasslashes",level:3},{value:"keys",id:"keys",level:3},{value:"keysMulti",id:"keysmulti",level:3},{value:"overview",id:"overview-1",level:3},{value:"ownExposure",id:"ownexposure",level:3},{value:"ownExposures",id:"ownexposures",level:3},{value:"ownSlash",id:"ownslash",level:3},{value:"ownSlashes",id:"ownslashes",level:3},{value:"query",id:"query",level:3},{value:"queryMulti",id:"querymulti",level:3},{value:"stakerExposures",id:"stakerexposures",level:3},{value:"stakerExposure",id:"stakerexposure",level:3},{value:"stakerPoints",id:"stakerpoints",level:3},{value:"stakerPrefs",id:"stakerprefs",level:3},{value:"stakerRewards",id:"stakerrewards",level:3},{value:"stakerRewardsMultiEras",id:"stakerrewardsmultieras",level:3},{value:"stakerRewardsMulti",id:"stakerrewardsmulti",level:3},{value:"stakerSlashes",id:"stakerslashes",level:3},{value:"stashes",id:"stashes",level:3},{value:"nextElected",id:"nextelected",level:3},{value:"validators",id:"validators",level:3},{value:"waitingInfo",id:"waitinginfo",level:3},{value:"technicalCommittee",id:"technicalcommittee",level:2},{value:"members",id:"members-4",level:3},{value:"hasProposals",id:"hasproposals-3",level:3},{value:"proposal",id:"proposal-3",level:3},{value:"proposalCount",id:"proposalcount-3",level:3},{value:"proposalHashes",id:"proposalhashes-3",level:3},{value:"proposals",id:"proposals-4",level:3},{value:"prime",id:"prime-3",level:3},{value:"treasury",id:"treasury",level:2},{value:"proposals",id:"proposals-5",level:3},{value:"tx",id:"tx",level:2},{value:"events",id:"events",level:3},{value:"signingInfo",id:"signinginfo",level:3}],c={toc:k},u="wrapper";function d(e){var a=e.components,t=(0,r.Z)(e,l);return(0,i.kt)(u,(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This page lists the derives that can be encountered in the different modules. Designed to simplify the process of querying complex on-chain data by combining multiple RPC calls, storage queries, and runtime logic into a single, callable function. "),(0,i.kt)("p",null,"Instead of manually fetching and processing blockchain data, developers can use ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.<module>.<method>()")," to retrieve information."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#accounts"},"accounts")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#alliance"},"alliance")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#bagsList"},"bagsList")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#balances"},"balances")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#bounties"},"bounties")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#chain"},"chain")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#contracts"},"contracts")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#council"},"council")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#crowdloan"},"crowdloan")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#democracy"},"democracy")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#elections"},"elections")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#imOnline"},"imOnline")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#membership"},"membership")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#parachains"},"parachains")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#session"},"session")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#society"},"society")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#staking"},"staking")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#technicalCommittee"},"technicalCommittee")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#treasury"},"treasury")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#tx"},"tx"))))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"accounts"},"accounts"),(0,i.kt)("h3",{id:"accountid"},(0,i.kt)("a",{parentName:"h3",href:"#accountId"},"accountId")),(0,i.kt)("p",null,"Resolves an address (in different formats) to its corresponding ",(0,i.kt)("inlineCode",{parentName:"p"},"AccountId"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.accounts.accountId"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"address ",(0,i.kt)("inlineCode",{parentName:"li"},"(Address | AccountId | AccountIndex | string | null)"),": An accounts address in various formats."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const ALICE = "F7Hs";\n\napi.derive.accounts.accountId(ALICE, (accountId) => {\n  console.log(`Resolved AccountId: ${accountId}`);\n});\n')))),(0,i.kt)("h3",{id:"flags"},(0,i.kt)("a",{parentName:"h3",href:"#flags"},"flags")),(0,i.kt)("p",null,"Retrieves the membership flags for a given account."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.accounts.flags")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"params"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"address ",(0,i.kt)("inlineCode",{parentName:"li"},"(AccountId | Address | string | null)"),": The account identifier.")))),(0,i.kt)("h3",{id:"idandindex"},(0,i.kt)("a",{parentName:"h3",href:"#idAndIndex"},"idAndIndex")),(0,i.kt)("p",null,"An array containing the [","[AccountId]","] and [","[AccountIndex]","] as optional values."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.accounts.idAndIndex"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"address ",(0,i.kt)("inlineCode",{parentName:"li"},"(Address | AccountId | AccountIndex | Uint8Array | string | null)"),": An accounts address in various formats."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {\n  console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);\n});\n")))),(0,i.kt)("h3",{id:"idtoindex"},(0,i.kt)("a",{parentName:"h3",href:"#idToIndex"},"idToIndex")),(0,i.kt)("p",null,"Retrieves the corresponding AccountIndex."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.accounts.idToIndex"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountId ",(0,i.kt)("inlineCode",{parentName:"li"},"( AccountId | string )"),": An accounts Id in different formats."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\napi.derive.accounts.idToIndex(ALICE, (accountIndex) => {\n  console.log(`The AccountIndex of ${ALICE} is ${accountIndex}`);\n});\n")))),(0,i.kt)("h3",{id:"identity"},(0,i.kt)("a",{parentName:"h3",href:"#identity"},"identity")),(0,i.kt)("p",null,"Retrieves the on chain identity information for a given account."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.accounts.identity"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accoutId ",(0,i.kt)("inlineCode",{parentName:"li"},"(AccountId | Uint8Array | string)"),": The account identifier to query the identity for."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const ALICE = "13xAUH";\n\napi.derive.accounts.identity(ALICE, (identity) => {\n  console.log(\n    "Account Identity:",\n    Object.keys(identity).map((key) => `${key}: ${identity[key]}`)\n  );\n});\n')))),(0,i.kt)("h3",{id:"hasidentity"},(0,i.kt)("a",{parentName:"h3",href:"#hasIdentity"},"hasIdentity")),(0,i.kt)("p",null,"Checks if a specific account has an identity registered on chain."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.accounts.hasIdentity"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accoutId ",(0,i.kt)("inlineCode",{parentName:"li"},"(AccountId | Uint8Array | string)"),": The account identifier to query."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const ALICE = "13AU";\nconsole.log(await api.derive.accounts.hasIdentity(ALICE));\n')))),(0,i.kt)("h3",{id:"hasidentitymulti"},(0,i.kt)("a",{parentName:"h3",href:"#hasIdentityMulti"},"hasIdentityMulti")),(0,i.kt)("p",null,"Checks whether multiple accounts have on chain identities registered."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.accounts.hasIdentityMulti"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountIds ",(0,i.kt)("inlineCode",{parentName:"li"},"(AccountId | Uint8Array | string)[]"),": Array of account identifiers to query."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const ALICE = "13AU";\nconst BOB = "16WW";\nconsole.log(await api.derive.accounts.hasIdentityMulti([ALICE, BOB]));\n')))),(0,i.kt)("h3",{id:"indextoid"},(0,i.kt)("a",{parentName:"h3",href:"#indexToId"},"indexToId")),(0,i.kt)("p",null,"Resolves an AccountIndex (short address) to the full AccountId."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.accounts.indexToId"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountIndex ",(0,i.kt)("inlineCode",{parentName:"li"},"( AccountIndex | string )"),": An accounts index in different formats."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const ALICE = "13AU";\nconst id = await api.derive.accounts.indexToId(ALICE);\nconsole.log(id);\n')))),(0,i.kt)("h3",{id:"indexes"},(0,i.kt)("a",{parentName:"h3",href:"#indexes"},"indexes")),(0,i.kt)("p",null,"This is an unwieldly query since it loops through all of the enumsets and returns all of the values found. This could be up to 32k depending on the number of active accounts in the system."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.accounts.indexes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"returns"),": Returns all the indexes on the system."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"api.derive.accounts.indexes((indexes) => {\n  console.log('All existing AccountIndexes', indexes);\n});\n")))),(0,i.kt)("h3",{id:"info"},(0,i.kt)("a",{parentName:"h3",href:"#info"},"info")),(0,i.kt)("p",null,"Returns aux. info with regards to an account, current that includes the accountId, accountIndex, identity and nickname"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.accounts.info"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"address ",(0,i.kt)("inlineCode",{parentName:"li"},"(AccountIndex | AccountId | Address | Uint8Array | string | null)"),": An accounts in different formats."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const ALICE = "13AU";\nconst info = await api.derive.accounts.info(ALICE);\nconsole.log(\n  "Account Info: ",\n  Object.keys(info).map((key) => `${key}: ${info[key]}`)\n);\n')))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"alliance"},"alliance"),(0,i.kt)("h3",{id:"members"},(0,i.kt)("a",{parentName:"h3",href:"#members"},"members")),(0,i.kt)("p",null,'Retrieves the list of members in the "allianceMotion" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.alliance.members")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const members = await api.derive.alliance.members();\nconsole.log(`Members: ${JSON.stringify(members)});\n")))),(0,i.kt)("h3",{id:"hasproposals"},(0,i.kt)("a",{parentName:"h3",href:"#hasProposals"},"hasProposals")),(0,i.kt)("p",null,'Checks if there are any active proposals in the "allianceMotion" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.alliance.hasProposals")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const exists = await api.derive.alliance.hasProposals();\nconsole.log(exists);\n")))),(0,i.kt)("h3",{id:"proposal"},(0,i.kt)("a",{parentName:"h3",href:"#proposal"},"proposal")),(0,i.kt)("p",null,'Retrieves details of a specific proposal in the "allianceMotion" collective by its hash.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.alliance.proposal")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const proposalDetails = await api.derive.alliance.proposal(PROPOSAL_HASH);\nconsole.log(proposalDetails);\n")))),(0,i.kt)("h3",{id:"proposalcount"},(0,i.kt)("a",{parentName:"h3",href:"#proposalCount"},"proposalCount")),(0,i.kt)("p",null,'Retrieves the total number of proposals in the "allianceMotion" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.alliance.proposalCount")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const count = await api.derive.alliance.proposalCount();\nconsole.log(`Amount of proposals: ${count}`);\n")))),(0,i.kt)("h3",{id:"proposalhashes"},(0,i.kt)("a",{parentName:"h3",href:"#proposalHashes"},"proposalHashes")),(0,i.kt)("p",null,'Retrieves an array of hashes for all active proposals in the "allianceMotion" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.alliance.proposalHashes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const hashes = await api.derive.alliance.proposalHashes();\nconsole.log(`Proposals ${JSON.stringify(hashes)}`);\n")))),(0,i.kt)("h3",{id:"proposals"},(0,i.kt)("a",{parentName:"h3",href:"#proposals"},"proposals")),(0,i.kt)("p",null,'Retrieves a list of all active proposals in the "allianceMotion" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.alliance.proposals")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const proposals = await api.derive.alliance.proposals();\nconsole.log(proposals);\n")))),(0,i.kt)("h3",{id:"prime"},(0,i.kt)("a",{parentName:"h3",href:"#prime"},"prime")),(0,i.kt)("p",null,'Retrieves the prime member of the "allianceMotion" collective, if one exists.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.alliance.prime")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const primeMember = await api.derive.alliance.prime();\nconsole.log(primeMember);\n")))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"bagslist"},"bagsList"),(0,i.kt)("h3",{id:"get"},(0,i.kt)("a",{parentName:"h3",href:"#get"},"get")),(0,i.kt)("p",null,"Retrieves a specific bag from the BagsList pallet by its id."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.bagsList.get")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"params"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"id ",(0,i.kt)("inlineCode",{parentName:"li"},"(BN | number)"),": The id of the bag to retrieve.")))),(0,i.kt)("h3",{id:"expand"},(0,i.kt)("a",{parentName:"h3",href:"#expand"},"expand")),(0,i.kt)("p",null,"Expands a given bag by retrieving all its nodes (accounts contained within the bag)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.bagsList.expand")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"params"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"bag ",(0,i.kt)("inlineCode",{parentName:"li"},"Bag"),": The bag to be expanded.")))),(0,i.kt)("h3",{id:"getexpanded"},(0,i.kt)("a",{parentName:"h3",href:"#getExpanded"},"getExpanded")),(0,i.kt)("p",null,"Retrieves and expands a specific bag from the BagsList pallet."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.bagsList.getExpanded")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"params"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"id ",(0,i.kt)("inlineCode",{parentName:"li"},"BN | number"),": The id of the bag to expand.")))),(0,i.kt)("h3",{id:"listnodes"},(0,i.kt)("a",{parentName:"h3",href:"#listNodes"},"listNodes")),(0,i.kt)("p",null,"Retrieves the list of nodes (accounts) contained in a specific bag within the BagsList pallet."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.bagsList.listNodes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"params"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"bag ",(0,i.kt)("inlineCode",{parentName:"li"},"(PalletBagsListListBag | null)"),": A reference to a specific bag in the BagsList pallet.")))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"balances"},"balances"),(0,i.kt)("h3",{id:"account"},(0,i.kt)("a",{parentName:"h3",href:"#account"},"account")),(0,i.kt)("p",null,"Retrieves the essential balance details for an account, such as free balance and account nonce."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.balances.account"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"address ",(0,i.kt)("inlineCode",{parentName:"li"},"( AccountIndex | AccountId | Address | string )"),": An accountsId in different formats."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const ALICE = 'F7Hs';\n\napi.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n  console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n});\n")))),(0,i.kt)("h3",{id:"all"},(0,i.kt)("a",{parentName:"h3",href:"#all"},"all")),(0,i.kt)("p",null,"Retrieves the complete balance information for an account, including free balance, locked balance, reserved balance, and more."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.balances.all"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"address ",(0,i.kt)("inlineCode",{parentName:"li"},"( AccountId | string )"),": An accountsId in different formats."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const ALICE = 'F7Hs';\n\napi.derive.balances.account(ALICE, (accountInfo) => {\n  console.log(\n    `${accountInfo.accountId} info:`,\n    Object.keys(accountInfo).map((key) => `${key}: ${accountInfo[key]}`)\n  );\n});\n")))),(0,i.kt)("h3",{id:"votingbalance"},(0,i.kt)("a",{parentName:"h3",href:"#votingBalance"},"votingBalance")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.balances.votingBalance"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"address ",(0,i.kt)("inlineCode",{parentName:"li"},"( AccountId | string )"),": An accounts Id in different formats."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"returns"),": An object containing the results of various balance queries")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const ALICE = 'F7Hs';\n\napi.derive.balances.votingBalance(ALICE, ({ accountId, lockedBalance }) => {\n  console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n});\n")))),(0,i.kt)("h3",{id:"votingbalances"},(0,i.kt)("a",{parentName:"h3",href:"#votingBalances"},"votingBalances")),(0,i.kt)("p",null,"Retrieves the balance information for multiple accounts, typically used in governance-related contexts to check voting power."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.balances.votingBalances"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"addresses ",(0,i.kt)("inlineCode",{parentName:"li"},"(AccountId | AccountIndex | Address | string)[]"),": An array of account identifiers."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const addresses = ["5D4b...Zf1", "5HGj...yrV"];\nconst balances = await api.derive.balances.votingBalances(addresses);\nconsole.log("Voting Balances:", balances);\n')))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"bounties"},"bounties"),(0,i.kt)("h3",{id:"bounties-1"},(0,i.kt)("a",{parentName:"h3",href:"#bounties"},"bounties")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.bounties.bounties")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const bounties = await api.derive.bounties();\nconsole.log("Active bounties:", bounties);\n')))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"chain"},"chain"),(0,i.kt)("h3",{id:"bestnumber"},(0,i.kt)("a",{parentName:"h3",href:"#bestNumber"},"bestNumber")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.chain.bestNumber")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"api.derive.chain.bestNumber((blockNumber) => {\n  console.log(`the current best block is #${blockNumber}`);\n});\n")))),(0,i.kt)("h3",{id:"bestnumberfinalized"},(0,i.kt)("a",{parentName:"h3",href:"#bestNumberFinalized"},"bestNumberFinalized")),(0,i.kt)("p",null,"Get the latest finalized block number."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.chain.bestNumberFinalized")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"returns"),": A BlockNumber"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"api.derive.chain.bestNumberFinalized((blockNumber) => {\n  console.log(`the current finalized block is #${blockNumber}`);\n});\n")))),(0,i.kt)("h3",{id:"bestnumberlag"},(0,i.kt)("a",{parentName:"h3",href:"#bestNumberLag"},"bestNumberLag")),(0,i.kt)("p",null,"Calculates the lag between finalized head and best head"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.chain.bestNumberLag")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"returns"),": A number of blocks ")),(0,i.kt)("h3",{id:"getblock"},(0,i.kt)("a",{parentName:"h3",href:"#getBlock"},"getBlock")),(0,i.kt)("p",null,"Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.chain.getBlock"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"hash ",(0,i.kt)("inlineCode",{parentName:"li"},"( Uint8Array | string )"),": A block hash as U8 array or string."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const { author, block } = await api.derive.chain.getBlock('0x123...456');\n\nconsole.log(`block #${block.header.number} was authored by ${author}`);\n")))),(0,i.kt)("h3",{id:"getblockbynumber"},(0,i.kt)("a",{parentName:"h3",href:"#getBlockByNumber"},"getBlockByNumber")),(0,i.kt)("p",null,"Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author by block number"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.chain.getBlockByNumber"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"blockNumber ",(0,i.kt)("inlineCode",{parentName:"li"},"( BN | bigint | Uint8Array | number | string )"),": "))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const { author, block } = await api.derive.chain.getBlockByNumber(123);\n\nconsole.log(`block #${block.header.number} was authored by ${author}`);\n")))),(0,i.kt)("h3",{id:"getheader"},(0,i.kt)("a",{parentName:"h3",href:"#getHeader"},"getHeader")),(0,i.kt)("p",null,"Get a specific block header and extend it with the author"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.chain.getHeader"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"hash ",(0,i.kt)("inlineCode",{parentName:"li"},"( Uint8Array | string )"),": - A block hash as U8 array or string."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"returns"),": An array containing the block header and the block author")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const { author, number } = await api.derive.chain.getHeader('0x123...456');\n\nconsole.log(`block #${number} was authored by ${author}`);\n")))),(0,i.kt)("h3",{id:"subscribefinalizedblocks"},(0,i.kt)("a",{parentName:"h3",href:"#subscribeFinalizedBlocks"},"subscribeFinalizedBlocks")),(0,i.kt)("p",null,"Retrieves the finalized block & events for that block"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.chain.subscribeFinalizedBlocks")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const unsub = await api.derive.chain.subscribeFinalizedBlocks((finalizedBlock) => {\n console.log(`# Finalized block ${finalizedBlock.block.hash}`);\n});\n")))),(0,i.kt)("h3",{id:"subscribefinalizedheads"},(0,i.kt)("a",{parentName:"h3",href:"#subscribeFinalizedHeads"},"subscribeFinalizedHeads")),(0,i.kt)("p",null,"An observable of the finalized block headers. Unlike the base chain.subscribeFinalizedHeads this does not skip any headers. Since finalization may skip specific blocks (finalization happens in terms of chains), this version of the derive tracks missing headers (since last retrieved) and provides them to the caller."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.chain.subscribeFinalizedHeads")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const unsub = await api.derive.chain.subscribeFinalizedHeads((finalizedHead) => {\n  console.log(`${finalizedHead.hash}`);\n});\n")))),(0,i.kt)("h3",{id:"subscribenewblocks"},(0,i.kt)("a",{parentName:"h3",href:"#subscribeNewBlocks"},"subscribeNewBlocks")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.chain.subscribeNewBlocks")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"returns"),": The latest block & events for that block"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const unsub = await api.derive.chain.subscribeNewBlocks((newBlock) => {\n  console.log(`Block Hash: ${newBlock.hash}`);\n});\n")))),(0,i.kt)("h3",{id:"subscribenewheads"},(0,i.kt)("a",{parentName:"h3",href:"#subscribeNewHeads"},"subscribeNewHeads")),(0,i.kt)("p",null,"An observable of the current block header and it's author."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.chain.subscribeNewHeads")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"returns"),": A header with the current header (including extracted author)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"api.derive.chain.subscribeNewHeads((header) => {\n  console.log(`block #${header.number} was authored by ${header.author}`);\n});\n")))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"contracts"},"contracts"),(0,i.kt)("h3",{id:"fees"},(0,i.kt)("a",{parentName:"h3",href:"#fees"},"fees")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.contracts.fees")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"returns"),": An object containing the combined results of the queries for all relevant contract fees as declared in the substrate chain spec."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"api.derive.contracts.fees(([creationFee, transferFee]) => {\n  console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);\n});\n")))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"council"},"council"),(0,i.kt)("h3",{id:"members-1"},(0,i.kt)("a",{parentName:"h3",href:"#members"},"members")),(0,i.kt)("p",null,'Retrieves the list of members in the "council" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.council.members")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const members = await api.derive.council.members();\nconsole.log(`Members: ${JSON.stringify(members)});\n")))),(0,i.kt)("h3",{id:"hasproposals-1"},(0,i.kt)("a",{parentName:"h3",href:"#hasProposals"},"hasProposals")),(0,i.kt)("p",null,'Checks if there are any active proposals in the "council" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.council.hasProposals")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const exists = await api.derive.council.hasProposals();\nconsole.log(exists);\n")))),(0,i.kt)("h3",{id:"proposal-1"},(0,i.kt)("a",{parentName:"h3",href:"#proposal"},"proposal")),(0,i.kt)("p",null,'Retrieves details of a specific proposal in the "councilMotion" collective by its hash.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.council.proposal")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const proposalDetails = await api.derive.council.proposal(PROPOSAL_HASH);\nconsole.log(proposalDetails);\n")))),(0,i.kt)("h3",{id:"proposalcount-1"},(0,i.kt)("a",{parentName:"h3",href:"#proposalCount"},"proposalCount")),(0,i.kt)("p",null,'Retrieves the total number of proposals in the "council" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.council.proposalCount")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const count = await api.derive.council.proposalCount();\nconsole.log(`Amount of proposals: ${count}`);\n")))),(0,i.kt)("h3",{id:"proposalhashes-1"},(0,i.kt)("a",{parentName:"h3",href:"#proposalHashes"},"proposalHashes")),(0,i.kt)("p",null,'Retrieves an array of hashes for all active proposals in the "council" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.council.proposalHashes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const hashes = await api.derive.council.proposalHashes();\nconsole.log(`Proposals ${JSON.stringify(hashes)}`);\n")))),(0,i.kt)("h3",{id:"proposals-1"},(0,i.kt)("a",{parentName:"h3",href:"#proposals"},"proposals")),(0,i.kt)("p",null,'Retrieves a list of all active proposals in the "council" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.council.proposals")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const proposals = await api.derive.council.proposals();\nconsole.log(proposals);\n")))),(0,i.kt)("h3",{id:"prime-1"},(0,i.kt)("a",{parentName:"h3",href:"#prime"},"prime")),(0,i.kt)("p",null,'Retrieves the prime member of the "council" collective, if one exists.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.council.prime")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const primeMember = await api.derive.council.prime();\nconsole.log(primeMember);\n")))),(0,i.kt)("h3",{id:"votes"},(0,i.kt)("a",{parentName:"h3",href:"#votes"},"votes")),(0,i.kt)("p",null,"Retrieves the council election votes for all participants."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.council.votes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const votes = await api.derive.council.votes();\n")))),(0,i.kt)("h3",{id:"votesof"},(0,i.kt)("a",{parentName:"h3",href:"#votesOf"},"votesOf")),(0,i.kt)("p",null,"Retrieves the council votes associated with a given account."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.council.votesOf"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountId ",(0,i.kt)("inlineCode",{parentName:"li"},"string | Uint8Array | AccountId"),": The accountId to retrieve votes for."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"returns"),": The stake and the list of candidates the account has voted for.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const accountId = "5Gw3s7qQ9Z..."; // Replace with a valid account ID\nconst votes = await api.derive.council.votesOf(accountId);\nconsole.log("Account votes:", votes);\n')))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"crowdloan"},"crowdloan"),(0,i.kt)("h3",{id:"childkey"},(0,i.kt)("a",{parentName:"h3",href:"#childKey"},"childKey")),(0,i.kt)("p",null,"Retrieves the child storage key for a given parachain\u2019s crowdloan contributions. This key is used to access contribution data stored in a separate child trie of the blockchain\u2019s state."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.crowdloan.childKey"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"paraId ",(0,i.kt)("inlineCode",{parentName:"li"},"string | number | BN"),": The parachain ID for which contributions are being queried."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const childKey = await api.derive.crowdloan.childKey(3369);\nconsole.log("Child Key:", childKey);\n')))),(0,i.kt)("h3",{id:"contributions"},(0,i.kt)("a",{parentName:"h3",href:"#contributions"},"contributions")),(0,i.kt)("p",null,"Retrieves all contributions for a given parachain crowdloan."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.crowdloan.contributions"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"paraId ",(0,i.kt)("inlineCode",{parentName:"li"},"string | number | BN"),": The parachain ID for which contributions are being queried."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const contributions = await api.derive.crowdloan.contributions(3369);\nconsole.log("Contributions:", contributions);\n')))),(0,i.kt)("h3",{id:"owncontributions"},(0,i.kt)("a",{parentName:"h3",href:"#ownContributions"},"ownContributions")),(0,i.kt)("p",null,"Retrieves the contribution amounts made by specific accounts (",(0,i.kt)("inlineCode",{parentName:"p"},"keys"),") to a given parachain crowdloan (",(0,i.kt)("inlineCode",{parentName:"p"},"paraId"),")."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.crowdloan.ownContributions"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"paraId ",(0,i.kt)("inlineCode",{parentName:"li"},"string | number | BN"),": The parachain ID for which contributions are being queried."),(0,i.kt)("li",{parentName:"ul"},"keys ",(0,i.kt)("inlineCode",{parentName:"li"},"string[]"),": An array of account addresses whose contributions are to be fetched."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const contributions = await api.derive.crowdloan.ownContributions(2000, ['5Ff...PqV', '5Gg...XyZ']);\nconsole.log(\"Own Contributions:\", contributions);\n")))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"democracy"},"democracy"),(0,i.kt)("h3",{id:"dispatchqueue"},(0,i.kt)("a",{parentName:"h3",href:"#dispatchQueue"},"dispatchQueue")),(0,i.kt)("p",null,"Retrieves the list of scheduled or pending dispatches in the governance system."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.democracy.dispatchQueue")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const queue = await api.derive.democracy.dispatchQueue();\nconsole.log("Dispatch Queue:", queue);\n')))),(0,i.kt)("h3",{id:"locks"},(0,i.kt)("a",{parentName:"h3",href:"#locks"},"locks")),(0,i.kt)("p",null,"Retrieves the democracy voting locks for a given account."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.democracy.locks"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountId ",(0,i.kt)("inlineCode",{parentName:"li"},"string | AccountId"),": The accountId for which to retrieve democracy voting locks."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const locks = await api.derive.democracy.locks('5FfFjX...'); // Replace with an actual accountId\nconsole.log(\"Democracy Locks:\", locks);\n")))),(0,i.kt)("h3",{id:"nextexternal"},(0,i.kt)("a",{parentName:"h3",href:"#nextExternal"},"nextExternal")),(0,i.kt)("p",null,"Retrieves the next external proposal that is scheduled for a referendum."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.democracy.nextExternal")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const nextExternal = await api.derive.democracy.nextExternal();\nconsole.log("Next external proposal:", nextExternal);\n')))),(0,i.kt)("h3",{id:"preimages"},(0,i.kt)("a",{parentName:"h3",href:"#preimages"},"preimages")),(0,i.kt)("p",null,"Retrieves the full details (preimages) of governance proposals using their on-chain hashes."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.democracy.preimages"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"hashes ",(0,i.kt)("inlineCode",{parentName:"li"},"(Hash | Uint8Array | string | FrameSupportPreimagesBounded)[]"),": An array of hashes representing governance proposals."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const preimages = await api.derive.democracy.preimages([HASH1, HASH2]);\n")))),(0,i.kt)("h3",{id:"preimage"},(0,i.kt)("a",{parentName:"h3",href:"#preimage"},"preimage")),(0,i.kt)("p",null,"Retrieves the full details (preimage) of a governance proposal using its on-chain hash."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.democracy.preimage")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"params"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"hash ",(0,i.kt)("inlineCode",{parentName:"li"},"Hash | Uint8Array | string | FrameSupportPreimagesBounded"),": Hash that represents governance proposals. * @example ",(0,i.kt)("inlineCode",{parentName:"li"},"javascript const preimage = await api.derive.democracy.preimage(HASH); "))))),(0,i.kt)("h3",{id:"proposals-2"},(0,i.kt)("a",{parentName:"h3",href:"#proposals"},"proposals")),(0,i.kt)("p",null,"Retrieves the list of active public proposals in the democracy module, along with their associated preimage data and deposit information."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.democracy.proposals")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const proposals = await api.derive.democracy.proposals();\nconsole.log("proposals:", proposals);\n')))),(0,i.kt)("h3",{id:"referendumids"},(0,i.kt)("a",{parentName:"h3",href:"#referendumIds"},"referendumIds")),(0,i.kt)("p",null,"Retrieves an array of active referendum IDs."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.democracy.referendumIds")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const referendums = await api.derive.democracy.referendumIds();\n")))),(0,i.kt)("h3",{id:"referendums"},(0,i.kt)("a",{parentName:"h3",href:"#referendums"},"referendums")),(0,i.kt)("p",null,"Retrieves information about all active referendums, including their details and associated votes."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.democracy.referendums")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const referendums = await api.derive.democracy.referendums();\n")))),(0,i.kt)("h3",{id:"referendumsactive"},(0,i.kt)("a",{parentName:"h3",href:"#referendumsActive"},"referendumsActive")),(0,i.kt)("p",null,"Retrieves information about active referendums."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.democracy.referendumsActive")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const referendums = await api.derive.democracy.referendumsActive();\nconsole.log("Active Referendums:", referendums);\n')))),(0,i.kt)("h3",{id:"referendumsfinished"},(0,i.kt)("a",{parentName:"h3",href:"#referendumsFinished"},"referendumsFinished")),(0,i.kt)("p",null,"Retrieves information about finished referendums."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.democracy.referendumsFinished")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const referendums = await api.derive.democracy.referendumsFinished();\nconsole.log("Finished Referendums:", referendums);\n')))),(0,i.kt)("h3",{id:"referendumsinfo"},(0,i.kt)("a",{parentName:"h3",href:"#referendumsInfo"},"referendumsInfo")),(0,i.kt)("p",null,"Retrieves information about multiple referendums by their IDs."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.democracy.referendumsInfo"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ids ",(0,i.kt)("inlineCode",{parentName:"li"},"BN[]"),": An array of referendum IDs to query."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { BN } from "@polkadot/util";\n\nconst referendumIds = [new BN(1)];\nconst referendums = await api.derive.democracy.referendumsInfo(referendumIds);\nconsole.log("Referendums Info:", referendums);\n')))),(0,i.kt)("h3",{id:"sqrtelectorate"},(0,i.kt)("a",{parentName:"h3",href:"#sqrtElectorate"},"sqrtElectorate")),(0,i.kt)("p",null,"Computes the square root of the total token issuance in the network."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.democracy.sqrtElectorate")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'let sqrtElectorate = await api.derive.democracy.sqrtElectorate();\nconsole.log("Square root of token issuance:", sqrtElectorate);\n')))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"elections"},"elections"),(0,i.kt)("h3",{id:"info-1"},(0,i.kt)("a",{parentName:"h3",href:"#info"},"info")),(0,i.kt)("p",null,"An object containing the combined results of the storage queries for all relevant election module properties."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.elections.info")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"api.derive.elections.info(({ members, candidates }) => {\n  console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);\n});\n")))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"imonline"},"imOnline"),(0,i.kt)("h3",{id:"receivedheartbeats"},(0,i.kt)("a",{parentName:"h3",href:"#receivedHeartbeats"},"receivedHeartbeats")),(0,i.kt)("p",null,"Return a boolean array indicating whether the passed accounts had received heartbeats in the current session."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.imOnline.receivedHeartbeats")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let unsub = await api.derive.imOnline.receivedHeartbeats((heartbeat) => {\n  console.log(heartbeat);\n});\n")))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"membership"},"membership"),(0,i.kt)("h3",{id:"members-2"},(0,i.kt)("a",{parentName:"h3",href:"#members"},"members")),(0,i.kt)("p",null,'Retrieves the list of members in the "membership" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.membership.members")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const members = await api.derive.membership.members();\nconsole.log(`Members: ${JSON.stringify(members)});\n")))),(0,i.kt)("h3",{id:"hasproposals-2"},(0,i.kt)("a",{parentName:"h3",href:"#hasProposals"},"hasProposals")),(0,i.kt)("p",null,'Checks if there are any active proposals in the "membership" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.membership.hasProposals")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const exists = await api.derive.membership.hasProposals();\nconsole.log(exists);\n")))),(0,i.kt)("h3",{id:"proposal-2"},(0,i.kt)("a",{parentName:"h3",href:"#proposal"},"proposal")),(0,i.kt)("p",null,'Retrieves details of a specific proposal in the "membership" collective by its hash.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.membership.proposal")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const proposalDetails = await api.derive.membership.proposal(PROPOSAL_HASH);\nconsole.log(proposalDetails);\n")))),(0,i.kt)("h3",{id:"proposalcount-2"},(0,i.kt)("a",{parentName:"h3",href:"#proposalCount"},"proposalCount")),(0,i.kt)("p",null,'Retrieves the total number of proposals in the "membership" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.membership.proposalCount")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const count = await api.derive.membership.proposalCount();\nconsole.log(`Amount of proposals: ${count}`);\n")))),(0,i.kt)("h3",{id:"proposalhashes-2"},(0,i.kt)("a",{parentName:"h3",href:"#proposalHashes"},"proposalHashes")),(0,i.kt)("p",null,'Retrieves an array of hashes for all active proposals in the "membership" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.membership.proposalHashes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const hashes = await api.derive.membership.proposalHashes();\nconsole.log(`Proposals ${JSON.stringify(hashes)}`);\n")))),(0,i.kt)("h3",{id:"proposals-3"},(0,i.kt)("a",{parentName:"h3",href:"#proposals"},"proposals")),(0,i.kt)("p",null,'Retrieves a list of all active proposals in the "membership" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.membership.proposals")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const proposals = await api.derive.membership.proposals();\nconsole.log(proposals);\n")))),(0,i.kt)("h3",{id:"prime-2"},(0,i.kt)("a",{parentName:"h3",href:"#prime"},"prime")),(0,i.kt)("p",null,'Retrieves the prime member of the "membership" collective, if one exists.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.membership.prime")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const primeMember = await api.derive.membership.prime();\nconsole.log(primeMember);\n")))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"parachains"},"parachains"),(0,i.kt)("h3",{id:"info-2"},(0,i.kt)("a",{parentName:"h3",href:"#info"},"info")),(0,i.kt)("p",null,"Retrieves detailed information about a specific parachain."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.parachains.info"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"id ",(0,i.kt)("inlineCode",{parentName:"li"},"ParaId | number"),": A unique numeric (non-negative integer) identifier for a parachain."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'await api.derive.parachains.info(1000, (info) => {\n  if (info) {\n    console.log(`Parachain ${info.id.toString()} is active: ${info.active}`);\n  } else {\n    console.log("Parachain information not available.");\n  }\n});\n')))),(0,i.kt)("h3",{id:"overview"},(0,i.kt)("a",{parentName:"h3",href:"#overview"},"overview")),(0,i.kt)("p",null,"Retrieves an overview of all registered parachains."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.parachains.overview")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"await api.derive.parachains.overview((overview) => {\n  parachains.forEach(parachain => {\n    console.log(`Parachain ${parachain.id.toString()} is registered.`);\n  });\n});\n")))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"session"},"session"),(0,i.kt)("h3",{id:"indexes-1"},(0,i.kt)("a",{parentName:"h3",href:"#indexes"},"indexes")),(0,i.kt)("p",null,"Retrieves session-related index data, adapting to whether the chain has staking enabled."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.session.indexes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"api.derive.session.indexes((indexes) => {\n  console.log(`Current session index: ${indexes.currentIndex}`);\n  console.log(`Validator count: ${indexes.validatorCount}`);\n});\n")))),(0,i.kt)("h3",{id:"info-3"},(0,i.kt)("a",{parentName:"h3",href:"#info"},"info")),(0,i.kt)("p",null,"Retrieves all the session and era query and calculates specific values on it as the length of the session and eras."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.session.info")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"api.derive.session.info((info) => {\n  console.log(`Session info ${JSON.stringify(info)}`);\n});\n")))),(0,i.kt)("h3",{id:"progress"},(0,i.kt)("a",{parentName:"h3",href:"#progress"},"progress")),(0,i.kt)("p",null,"Retrieves session information and progress."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.session.progress")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"api.derive.session.progress((progress) => {\n  console.log(`Session progress ${JSON.stringify(progress)}`);\n});\n")))),(0,i.kt)("h3",{id:"eralenght"},(0,i.kt)("a",{parentName:"h3",href:"#eraLenght"},"eraLenght")),(0,i.kt)("p",null,"Retrieves the total length of the current era."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.session.eraLenght")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"api.derive.session.eraLength((length) => {\n  console.log(`Current era length: ${length} sessions`);\n});\n")))),(0,i.kt)("h3",{id:"eraprogress"},(0,i.kt)("a",{parentName:"h3",href:"#eraProgress"},"eraProgress")),(0,i.kt)("p",null,"Retrieves the progress of the current era."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.session.eraProgress")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"api.derive.session.eraProgress((progress) => {\n  console.log(`Current era progress: ${progress} sessions`);\n});\n")))),(0,i.kt)("h3",{id:"sessionprogress"},(0,i.kt)("a",{parentName:"h3",href:"#sessionProgress"},"sessionProgress")),(0,i.kt)("p",null,"Retrieves the progress of the current session."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.session.sessionProgress")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"  api.derive.session.sessionProgress((progress) => {\n  console.log(`Current session progress: ${progress} slots`);\n});\n")))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"society"},"society"),(0,i.kt)("h3",{id:"candidate"},(0,i.kt)("a",{parentName:"h3",href:"#candidate"},"candidate")),(0,i.kt)("p",null,"Retrieves the list of candidates for the society module."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.society.candidate")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const societyCandidates = await api.derive.society.candidates();\nconsole.log(societyCandidates);\n")))),(0,i.kt)("h3",{id:"info-4"},(0,i.kt)("a",{parentName:"h3",href:"#info"},"info")),(0,i.kt)("p",null,"Get the overall info for a society."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.society.info")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const societyInfo = await api.derive.society.candidates();\nconsole.log(societyInfo);\n")))),(0,i.kt)("h3",{id:"member"},(0,i.kt)("a",{parentName:"h3",href:"#member"},"member")),(0,i.kt)("p",null,"Get the member info for a society."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.society.member"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountId ",(0,i.kt)("inlineCode",{parentName:"li"},"AccountId"),": "))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const member = await api.derive.society.member(ALICE);\nconsole.log(member);\n")))),(0,i.kt)("h3",{id:"members-3"},(0,i.kt)("a",{parentName:"h3",href:"#members"},"members")),(0,i.kt)("p",null,"Get the society members."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.society.members")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const members = await api.derive.society.members();\nconsole.log(members);\n")))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"staking"},"staking"),(0,i.kt)("h3",{id:"accounts-1"},(0,i.kt)("a",{parentName:"h3",href:"#accounts"},"accounts")),(0,i.kt)("p",null,"From a list of stashes, fill in all the relevant staking details"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.accounts"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountIds ",(0,i.kt)("inlineCode",{parentName:"li"},"(Uint8Array | string)[]"),": List of account stashes"),(0,i.kt)("li",{parentName:"ul"},"opts ",(0,i.kt)("inlineCode",{parentName:"li"},"StakingQueryFlags"),": optional filtering flag"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const accounts = await api.derive.staking.accounts([\n "149B17nn7zVL4SkLSNmANupEkGexUBAxVrdk4bbWFZYibkFc",\n]);\nconsole.log("First account staking info:", accounts[0]);\n')))),(0,i.kt)("h3",{id:"account-1"},(0,i.kt)("a",{parentName:"h3",href:"#account"},"account")),(0,i.kt)("p",null,"From a stash, retrieve the controllerId and fill in all the relevant staking details."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.account"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountId ",(0,i.kt)("inlineCode",{parentName:"li"},"(Uint8Array | string)"),": AccountId of the stash."),(0,i.kt)("li",{parentName:"ul"},"opts ",(0,i.kt)("inlineCode",{parentName:"li"},"StakingQueryFlags"),": (Optional) filtering flag."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const accountStakingData = await api.derive.staking.account(\n  "149B17nn7zVL4SkLSNmANupEkGexUBAxVrdk4bbWFZYibkFc"\n);\nconsole.log(accountStakingData);\n')))),(0,i.kt)("h3",{id:"currentpoints"},(0,i.kt)("a",{parentName:"h3",href:"#currentPoints"},"currentPoints")),(0,i.kt)("p",null,"Retrieve the staking overview, including elected and points earned."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.staking.currentPoints")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const currentPoints = await api.derive.staking.currentPoints();\nconsole.log(currentPoints.toHuman());\n")))),(0,i.kt)("h3",{id:"electedinfo"},(0,i.kt)("a",{parentName:"h3",href:"#electedInfo"},"electedInfo")),(0,i.kt)("p",null,"Retrieves detailed staking information about the next elected validators and their associated staking data."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.electedInfo"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"flags? ",(0,i.kt)("inlineCode",{parentName:"li"},"StakingQueryFlags"),": (Optional) Query flags to filter the staking data."),(0,i.kt)("li",{parentName:"ul"},"page? ",(0,i.kt)("inlineCode",{parentName:"li"},"number"),": (Optional) The page index for paginated results."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const { nextElected, validators, info } =\n  await api.derive.staking.electedInfo();\nconsole.log(\n  "Next Elected Validators:",\n  nextElected.map((acc) => acc.toString())\n);\nconsole.log(\n  "Current Validators:",\n  validators.map((acc) => acc.toString())\n);\nconsole.log("Validator Staking Info:", info);\n')))),(0,i.kt)("h3",{id:"eraexposure"},(0,i.kt)("a",{parentName:"h3",href:"#eraExposure"},"eraExposure")),(0,i.kt)("p",null,"Retrieves the staking exposure (nominators and total stake) for a specific era."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.eraExposure"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"eras ",(0,i.kt)("inlineCode",{parentName:"li"},"EraIndex"),": The staking era to query."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const era = api.createType("EraIndex", 1000);\nconst exposure = await api.derive.staking.eraExposure(era);\n')))),(0,i.kt)("h3",{id:"erasexposure"},(0,i.kt)("a",{parentName:"h3",href:"#erasExposure"},"erasExposure")),(0,i.kt)("p",null,"Retrieves staking exposure details for multiple past eras."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.erasExposure"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"withActive? ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": (Optional) Whether to include the active era in the result."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const exposure = await api.derive.staking.erasExposure(true);\n")))),(0,i.kt)("h3",{id:"erashistoric"},(0,i.kt)("a",{parentName:"h3",href:"#erasHistoric"},"erasHistoric")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.staking.erasHistoric")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"params"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"withActive? ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": (Optional) Whether to include the active era in the result.")))),(0,i.kt)("h3",{id:"eraspoints"},(0,i.kt)("a",{parentName:"h3",href:"#erasPoints"},"erasPoints")),(0,i.kt)("p",null,"Retrieves historical era points with its validators."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.erasPoints"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"withActive? ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": (Optional) Whether to include the active era in the result."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const points = await api.derive.staking.erasPoints(true);\nconsole.log(\n  "Validator points:",\n  points.map(({ era, eraPoints }) => `Era: ${era}, points ${eraPoints}`)\n);\n')))),(0,i.kt)("h3",{id:"eraprefs"},(0,i.kt)("a",{parentName:"h3",href:"#eraPrefs"},"eraPrefs")),(0,i.kt)("p",null,"Retrieves the validators commission preferences for a given staking era."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.eraPrefs"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"era ",(0,i.kt)("inlineCode",{parentName:"li"},"EraIndex"),": The staking era to query."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const era = api.createType("EraIndex", 1000);\nconst prefs = await api.derive.staking.eraPrefs(era);\nconsole.log(JSON.stringify(prefs));\n')))),(0,i.kt)("h3",{id:"erasprefs"},(0,i.kt)("a",{parentName:"h3",href:"#erasPrefs"},"erasPrefs")),(0,i.kt)("p",null,"Retrieves validators commission preferences for multiple past staking eras"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.erasPrefs"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"withActive? ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": (Optional) Whether to include the active era in the result."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const prefs = await api.derive.staking.erasPrefs(true);\n")))),(0,i.kt)("h3",{id:"erasrewards"},(0,i.kt)("a",{parentName:"h3",href:"#erasRewards"},"erasRewards")),(0,i.kt)("p",null,"Retrieves rewards for historical eras."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.erasRewards"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"withActive? ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": (Optional) Whether to include the active era in the result."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const rewards = await api.derive.staking.erasRewards(true);\n")))),(0,i.kt)("h3",{id:"eraslashes"},(0,i.kt)("a",{parentName:"h3",href:"#eraSlashes"},"eraSlashes")),(0,i.kt)("p",null,"Retrieves the slashes for a specific staking era."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.eraSlashes"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"eras ",(0,i.kt)("inlineCode",{parentName:"li"},"EraIndex"),": The staking era to query."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const era = api.createType("EraIndex", 1000);\nconst slashes = await api.derive.staking.eraSlashes(era);\n')))),(0,i.kt)("h3",{id:"erasslashes"},(0,i.kt)("a",{parentName:"h3",href:"#erasSlashes"},"erasSlashes")),(0,i.kt)("p",null,"Retrieves slashes for historical eras."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.erasSlashes"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"withActive? ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": (Optional) Whether to include the active era in the result."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const slashes = await api.derive.staking.erasSlashes(true);\n")))),(0,i.kt)("h3",{id:"keys"},(0,i.kt)("a",{parentName:"h3",href:"#keys"},"keys")),(0,i.kt)("p",null,"Retrieves the session keys associated with a given stash account."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.keys"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"stashId ",(0,i.kt)("inlineCode",{parentName:"li"},"Uint8Array | string"),": The stash account ID whose session keys are to be retrieved."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const keys = await api.derive.staking.keys(\n  ALICE\n);\nconsole.log(\n  "Session keys:",\n  keys.sessionIds.map((key) => `Key: ${key}`)\n);\n')))),(0,i.kt)("h3",{id:"keysmulti"},(0,i.kt)("a",{parentName:"h3",href:"#keysMulti"},"keysMulti")),(0,i.kt)("p",null,"Retrieves session keys for multiple stash accounts."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.keysMulti"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"stashIds ",(0,i.kt)("inlineCode",{parentName:"li"},"(Uint8Array | string)[]"),": Array of stash account IDs."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const keysMulti = await api.derive.staking.keysMulti([ ALICE, BOB ]);\nkeysMulti.forEach((keys) => {\n  console.log(\n    "Session keys:",\n    keys.sessionIds.map((key) => `Key: ${key}`)\n  );\n});\n')))),(0,i.kt)("h3",{id:"overview-1"},(0,i.kt)("a",{parentName:"h3",href:"#overview"},"overview")),(0,i.kt)("p",null,"Retrieve the staking overview, including elected validators and points earned."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.staking.overview")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const {\n  activeEra,\n  activeEraStart,\n  currentEra,\n  currentIndex,\n  nextElected,\n  validatorCount,\n  validators,\n} = await api.derive.staking.overview();\n")))),(0,i.kt)("h3",{id:"ownexposure"},(0,i.kt)("a",{parentName:"h3",href:"#ownExposure"},"ownExposure")),(0,i.kt)("p",null,"Retrieves the staking exposure of a validator for a specific era, including their own stake."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.ownExposure"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountId ",(0,i.kt)("inlineCode",{parentName:"li"},"Uint8Array | string"),": The validator stash account."),(0,i.kt)("li",{parentName:"ul"},"era ",(0,i.kt)("inlineCode",{parentName:"li"},"EraIndex"),": The staking era to query."),(0,i.kt)("li",{parentName:"ul"},"page? ",(0,i.kt)("inlineCode",{parentName:"li"},"u32 | AnyNumber"),": (Optional) The pagination index."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const era = api.createType("EraIndex", 1000);\nconst exposure = await api.derive.staking.ownExposure(\n  "11VR4pF6c7kfBhfmuwwjWY3FodeYBKWx7ix2rsRCU2q6hqJ",\n  era\n);\nconsole.log(JSON.stringify(exposure));\n')))),(0,i.kt)("h3",{id:"ownexposures"},(0,i.kt)("a",{parentName:"h3",href:"#ownExposures"},"ownExposures")),(0,i.kt)("p",null,"Retrieves staking exposures for a validator across multiple historical eras."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.ownExposures"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountId ",(0,i.kt)("inlineCode",{parentName:"li"},"Uint8Array | string"),": The validator stash account."),(0,i.kt)("li",{parentName:"ul"},"withActive ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": Whether to include the active era."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const exposures = await api.derive.staking.ownExposures(\n  ALICE,\n  true\n);\n")))),(0,i.kt)("h3",{id:"ownslash"},(0,i.kt)("a",{parentName:"h3",href:"#ownSlash"},"ownSlash")),(0,i.kt)("p",null,"Retrieves the slashes applied to a specific account in a given era."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.ownSlash"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountId ",(0,i.kt)("inlineCode",{parentName:"li"},"Uint8Array | string"),": The validator stash account."),(0,i.kt)("li",{parentName:"ul"},"era ",(0,i.kt)("inlineCode",{parentName:"li"},"EraIndex"),": The staking era to query."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const era = api.createType("EraIndex", 1000);\nconst slashedAmount = await api.derive.staking.ownSlash(\n  ALICE,\n  era\n);\nconsole.log(`Era: ${slashedAmount.era}, total ${slashedAmount.total}`);\n')))),(0,i.kt)("h3",{id:"ownslashes"},(0,i.kt)("a",{parentName:"h3",href:"#ownSlashes"},"ownSlashes")),(0,i.kt)("p",null,"Retrieves the slashes for a specific account across all historic eras."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.ownSlashes"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountId ",(0,i.kt)("inlineCode",{parentName:"li"},"Uint8Array | string"),": The validator stash account."),(0,i.kt)("li",{parentName:"ul"},"withActive ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": Whether to include the active era."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const slashes = await api.derive.staking.ownSlashes(\n  ALICE,\n  true\n);\nconsole.log(slashes);\n")))),(0,i.kt)("h3",{id:"query"},(0,i.kt)("a",{parentName:"h3",href:"#query"},"query")),(0,i.kt)("p",null,"Retrieves staking details for a given stash account."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.query"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountId ",(0,i.kt)("inlineCode",{parentName:"li"},"Uint8Array | string"),": The stash account to query."),(0,i.kt)("li",{parentName:"ul"},"flags ",(0,i.kt)("inlineCode",{parentName:"li"},"StakingQueryFlags"),": Flags to customize the query."),(0,i.kt)("li",{parentName:"ul"},"page ",(0,i.kt)("inlineCode",{parentName:"li"},"u32"),": (Optional) pagination parameter."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const stakingInfo = await api.derive.staking.query(\n  ALICE,\n  {}\n);\n")))),(0,i.kt)("h3",{id:"querymulti"},(0,i.kt)("a",{parentName:"h3",href:"#queryMulti"},"queryMulti")),(0,i.kt)("p",null,"Retrieves staking details for multiple stash accounts."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.queryMulti"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountIds ",(0,i.kt)("inlineCode",{parentName:"li"},"(Uint8Array | string)[]"),": List of stash accounts to query."),(0,i.kt)("li",{parentName:"ul"},"flags ",(0,i.kt)("inlineCode",{parentName:"li"},"StakingQueryFlags"),": Flags to customize the query."),(0,i.kt)("li",{parentName:"ul"},"page ",(0,i.kt)("inlineCode",{parentName:"li"},"u32"),": (Optional) pagination parameter."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const stakingInfos = await api.derive.staking.queryMulti([stashId1, stashId2], {});\n")))),(0,i.kt)("h3",{id:"stakerexposures"},(0,i.kt)("a",{parentName:"h3",href:"#stakerExposures"},"stakerExposures")),(0,i.kt)("p",null,"Retrieves staking exposure for multiple accounts across historical eras."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.stakerExposures"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountIds ",(0,i.kt)("inlineCode",{parentName:"li"},"(Uint8Array | string)[]"),": List of validator stash accounts."),(0,i.kt)("li",{parentName:"ul"},"withActive ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": Whether to include the active era."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const exposure = await api.derive.staking.stakerExposures(\n  [ALICE, BOB],\n  true\n);\n")))),(0,i.kt)("h3",{id:"stakerexposure"},(0,i.kt)("a",{parentName:"h3",href:"#stakerExposure"},"stakerExposure")),(0,i.kt)("p",null,"Retrieves staking exposure for a single account across historical eras. Exposure refers to the total stake associated with a validator."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.stakerExposure"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountId ",(0,i.kt)("inlineCode",{parentName:"li"},"Uint8Array | string"),": The validator stash account."),(0,i.kt)("li",{parentName:"ul"},"withActive ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": Whether to include the active era."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const exposure = await api.derive.staking.stakerExposure(\n  ALICE,\n  true\n);\n")))),(0,i.kt)("h3",{id:"stakerpoints"},(0,i.kt)("a",{parentName:"h3",href:"#stakerPoints"},"stakerPoints")),(0,i.kt)("p",null,"Retrieves the era reward points earned by a given staker across all eras."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.stakerPoints"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountId ",(0,i.kt)("inlineCode",{parentName:"li"},"Uint8Array | string"),": The stakers AccountId."),(0,i.kt)("li",{parentName:"ul"},"withActive ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": Whether to include the active era."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const points = await api.derive.staking.stakerPoints(\n  ALICE, //Alice accountId\n  false\n);\nconsole.log(\n  'Validator Era Points:',\n  points.map(({ era, points }) => `Era ${era}: ${points.toString()} points`)\n);\n")))),(0,i.kt)("h3",{id:"stakerprefs"},(0,i.kt)("a",{parentName:"h3",href:"#stakerPrefs"},"stakerPrefs")),(0,i.kt)("p",null,"Retrieves the validator preferences for a given staker across historical eras."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.stakerPrefs"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountId ",(0,i.kt)("inlineCode",{parentName:"li"},"Uint8Array | string"),": The stakers AccountId."),(0,i.kt)("li",{parentName:"ul"},"withActive ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": Whether to include the active era."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const prefs = await api.derive.staking.stakerPrefs(\n  ALICE, //Alice accountId\n  false\n);\nconsole.log(\n  'Validator Preferences:',\n  prefs.map(\n    ({ era, validatorPrefs }) => `Era ${era}: Commission ${validatorPrefs.commission.toString()}`\n  )\n);\n")))),(0,i.kt)("h3",{id:"stakerrewards"},(0,i.kt)("a",{parentName:"h3",href:"#stakerRewards"},"stakerRewards")),(0,i.kt)("p",null,"Staking rewards history for a given staker."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.stakerRewards"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountId ",(0,i.kt)("inlineCode",{parentName:"li"},"Uint8Array | string"),": The stakers AccountId."),(0,i.kt)("li",{parentName:"ul"},"withActive ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": Whether to include the active era."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const rewards = await api.derive.staking.stakerRewards(\n  ALICE, //Alice accountId\n  false\n);\n")))),(0,i.kt)("h3",{id:"stakerrewardsmultieras"},(0,i.kt)("a",{parentName:"h3",href:"#stakerRewardsMultiEras"},"stakerRewardsMultiEras")),(0,i.kt)("p",null,"Staking rewards for multiple stakers over specific eras."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.stakerRewardsMultiEras"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountIds ",(0,i.kt)("inlineCode",{parentName:"li"},"Uint8Array | string"),": List of stakers identified by their AccountId."),(0,i.kt)("li",{parentName:"ul"},"eras ",(0,i.kt)("inlineCode",{parentName:"li"},"EraIndex[]"),": Eras for which to retrieve the data."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const rewards = await api.derive.staking.stakerRewardsMultiEras(\n  [ALICE, BOB, CHARLIER], //accountIds\n  [100,101]  //eras\n);\n")))),(0,i.kt)("h3",{id:"stakerrewardsmulti"},(0,i.kt)("a",{parentName:"h3",href:"#stakerRewardsMulti"},"stakerRewardsMulti")),(0,i.kt)("p",null,"Staking rewards for multiple stakers."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.stakerRewardsMulti"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountIds ",(0,i.kt)("inlineCode",{parentName:"li"},"Uint8Array | string"),": List of stakers identified by their AccountId."),(0,i.kt)("li",{parentName:"ul"},"withActive ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": Whether to include the active era."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const rewards = await api.derive.staking.stakerRewardsMulti(\n  [ALICE, BOB, CHARLIER], //accountIds\n  true\n);\n")))),(0,i.kt)("h3",{id:"stakerslashes"},(0,i.kt)("a",{parentName:"h3",href:"#stakerSlashes"},"stakerSlashes")),(0,i.kt)("p",null,"Retrieve the historical slashes (penalties) for a given staker."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.stakerSlashes"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"accountId ",(0,i.kt)("inlineCode",{parentName:"li"},"Uint8Array | string"),": The stakers AccountId."),(0,i.kt)("li",{parentName:"ul"},"withActive ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": Whether to include the active era."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"}," const stakerSlashes = await api.derive.staking.stakerSlashes(\n  ALICE, //Alice accountId\n  true\n);\nconsole.log(\n  'Staker Slashes:',\n  stakerSlashes.map(({ era, total }) => `Era ${era}: Slashed ${total.toString()}`)\n);\n")))),(0,i.kt)("h3",{id:"stashes"},(0,i.kt)("a",{parentName:"h3",href:"#stashes"},"stashes")),(0,i.kt)("p",null,"Retrieve the list of all validator stashes."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.staking.stashes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const stashes = await api.derive.staking.stashes();\nconsole.log(\n  "Validator Stashes:",\n  stashes.map((s) => s.toString())\n);\n')))),(0,i.kt)("h3",{id:"nextelected"},(0,i.kt)("a",{parentName:"h3",href:"#nextElected"},"nextElected")),(0,i.kt)("p",null,"Retrieves the list of accounts that are set to be the next elected validators in the staking system. It provides a preview of who will be validators in the next staking era."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.staking.nextElected")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const nextElected = await api.derive.staking.nextElected();\nconsole.log(\n  "Next Elected Validators:",\n  nextElected.map((acc) => acc.toString())\n);\n')))),(0,i.kt)("h3",{id:"validators"},(0,i.kt)("a",{parentName:"h3",href:"#validators"},"validators")),(0,i.kt)("p",null,"Retrieve latest list of validators."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.staking.validators")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const { validators, nextElected } = await api.derive.staking.validators();\nconsole.log(\n  "Current Validators:",\n  validators.map((v) => v.toString())\n);\nconsole.log(\n  "Next Elected Validators:",\n  nextElected.map((v) => v.toString())\n);\n')))),(0,i.kt)("h3",{id:"waitinginfo"},(0,i.kt)("a",{parentName:"h3",href:"#waitingInfo"},"waitingInfo")),(0,i.kt)("p",null,"Staking candidates who are waiting to become validators."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.staking.waitingInfo"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"flags? ",(0,i.kt)("inlineCode",{parentName:"li"},"StakingQueryFlags"),": (Optional) Query flags to filter the staking data."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const { waiting, info } = await api.derive.staking.waitingInfo();\nconsole.log(\n  "Waiting Candidates:",\n  waiting.map((acc) => acc.toString())\n);\n')))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"technicalcommittee"},"technicalCommittee"),(0,i.kt)("h3",{id:"members-4"},(0,i.kt)("a",{parentName:"h3",href:"#members"},"members")),(0,i.kt)("p",null,'Retrieves the list of members in the "technicalCommittee" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.technicalCommittee.members")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const members = await api.derive.technicalCommittee.members();\nconsole.log(`Members: ${JSON.stringify(members)});\n")))),(0,i.kt)("h3",{id:"hasproposals-3"},(0,i.kt)("a",{parentName:"h3",href:"#hasProposals"},"hasProposals")),(0,i.kt)("p",null,'Checks if there are any active proposals in the "technicalCommittee" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.technicalCommittee.hasProposals")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const exists = await api.derive.technicalCommittee.hasProposals();\nconsole.log(exists);\n")))),(0,i.kt)("h3",{id:"proposal-3"},(0,i.kt)("a",{parentName:"h3",href:"#proposal"},"proposal")),(0,i.kt)("p",null,'Retrieves details of a specific proposal in the "technicalCommitteeMotion" collective by its hash.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.technicalCommittee.proposal")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const proposalDetails = await api.derive.technicalCommittee.proposal(PROPOSAL_HASH);\nconsole.log(proposalDetails);\n")))),(0,i.kt)("h3",{id:"proposalcount-3"},(0,i.kt)("a",{parentName:"h3",href:"#proposalCount"},"proposalCount")),(0,i.kt)("p",null,'Retrieves the total number of proposals in the "technicalCommittee" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.technicalCommittee.proposalCount")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const count = await api.derive.technicalCommittee.proposalCount();\nconsole.log(`Amount of proposals: ${count}`);\n")))),(0,i.kt)("h3",{id:"proposalhashes-3"},(0,i.kt)("a",{parentName:"h3",href:"#proposalHashes"},"proposalHashes")),(0,i.kt)("p",null,'Retrieves an array of hashes for all active proposals in the "technicalCommittee" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.technicalCommittee.proposalHashes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const hashes = await api.derive.technicalCommittee.proposalHashes();\nconsole.log(`Proposals ${JSON.stringify(hashes)}`);\n")))),(0,i.kt)("h3",{id:"proposals-4"},(0,i.kt)("a",{parentName:"h3",href:"#proposals"},"proposals")),(0,i.kt)("p",null,'Retrieves a list of all active proposals in the "technicalCommittee" collective.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.technicalCommittee.proposals")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const proposals = await api.derive.technicalCommittee.proposals();\nconsole.log(proposals);\n")))),(0,i.kt)("h3",{id:"prime-3"},(0,i.kt)("a",{parentName:"h3",href:"#prime"},"prime")),(0,i.kt)("p",null,'Retrieves the prime member of the "technicalCommittee" collective, if one exists.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.technicalCommittee.prime")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const primeMember = await api.derive.technicalCommittee.prime();\nconsole.log(primeMember);\n")))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"treasury"},"treasury"),(0,i.kt)("h3",{id:"proposals-5"},(0,i.kt)("a",{parentName:"h3",href:"#proposals"},"proposals")),(0,i.kt)("p",null,"Retrieve all active and approved treasury proposals, along with their info."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"api.derive.treasury.proposals")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"example"),": ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const treasuryProposals = await api.derive.treasury.proposals();\nconsole.log(treasuryProposals);\n")))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"tx"},"tx"),(0,i.kt)("h3",{id:"events"},(0,i.kt)("a",{parentName:"h3",href:"#events"},"events")),(0,i.kt)("p",null,"Retrieves the block information alongside its events at a given block hash"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.tx.events"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"at ",(0,i.kt)("inlineCode",{parentName:"li"},"Hash"),": Block hash to query at."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const blockHash = api.registry.createType(\n  "Hash",\n  "0xf1dc2efe8265be67deea5e91b05a98a7f9f81f66854e92825cf36f541beb7af6"\n);\nconst { events, block } = await api.derive.tx.events(blockHash);\n')))),(0,i.kt)("h3",{id:"signinginfo"},(0,i.kt)("a",{parentName:"h3",href:"#signingInfo"},"signingInfo")),(0,i.kt)("p",null,"Retrieves signing-related information for an account, including the nonce, block header, and mortal length."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"interface"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"api.derive.tx.signingInfo"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"params"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"address ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),": The account address for which signing information is needed."),(0,i.kt)("li",{parentName:"ul"},"nonce? ",(0,i.kt)("inlineCode",{parentName:"li"},"BN | bigint | Uint8Array | number | string"),": (Optional) The nonce to use. If ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined"),", the latest nonce is retrieved."),(0,i.kt)("li",{parentName:"ul"},"era? ",(0,i.kt)("inlineCode",{parentName:"li"},"IExtrinsicEra | number"),": (Optional) The transaction era."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"example"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const info = await api.derive.tx.signingInfo(\n  "14mM9FRDDtwSYicjNxSvMfQkap8o4m9zHq7hNW4JpbSL4PPU"\n);\nconsole.log(info);\n')))))}d.isMDXComponent=!0}}]);