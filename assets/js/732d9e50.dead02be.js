"use strict";(self.webpackChunkpolkadot_js=self.webpackChunkpolkadot_js||[]).push([[7400],{4137:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(n),f=o,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||a;return n?r.createElement(m,s(s({ref:t},l),{},{components:n})):r.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},29:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var r=n(7462),o=n(3366),a=(n(7294),n(4137)),s=["components"],i={title:"Usage",slug:"/extension/usage"},c=void 0,u={unversionedId:"extension/usage",id:"extension/usage",title:"Usage",description:"To install the component, do yarn add @polkadot/extension-dapp",source:"@site/docs/extension/usage.md",sourceDirName:"extension",slug:"/extension/usage",permalink:"/docs/extension/usage",draft:!1,editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/extension/usage.md",tags:[],version:"current",frontMatter:{title:"Usage",slug:"/extension/usage"},sidebar:"reference",previous:{title:"Overview",permalink:"/docs/extension"},next:{title:"Cookbook",permalink:"/docs/extension/cookbook"}},l={},p=[],d={toc:p},f="wrapper";function m(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)(f,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To install the component, do ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn add @polkadot/extension-dapp"),"\nHere is a brief walk through how to use the different utilities from @polkadot/extension-dapp."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { web3Accounts, web3Enable, web3FromAddress } from '@polkadot/extension-dapp';\n\n// returns an array of all the injected sources\n// (this needs to be called first, before other requests)\nconst allInjected = await web3Enable('my cool dapp');\n\n// returns an array of { address, meta: { name, source } }\n// meta.source contains the name of the extension that provides this account\nconst allAccounts = await web3Accounts();\n\n// the address we use to use for signing, as injected\nconst SENDER = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFabHE';\n\n// finds an injector for an address\nconst injector = await web3FromAddress(SENDER);\n\n// sign and send our transaction - notice here that the address of the account\n// (as retrieved injected) is passed through as the param to the `signAndSend`,\n// the API then calls the extension to present to the user and get it signed.\n// Once complete, the api sends the tx + signature via the normal process\napi.tx.balances\n  .transferKeepAlive('5C5555yEXUcmEJ5kkcCMvdZjUo7NGJiQJMS7vZXEeoMhj3VQ', 123456)\n  .signAndSend(SENDER, { signer: injector.signer }, (status) => { ... });\n")))}m.isMDXComponent=!0}}]);