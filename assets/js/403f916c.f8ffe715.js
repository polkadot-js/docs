"use strict";(self.webpackChunkpolkadot_js=self.webpackChunkpolkadot_js||[]).push([[2222],{4137:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return c}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),k=i,c=u["".concat(s,".").concat(k)]||u[k]||d[k]||r;return a?n.createElement(c,l(l({ref:t},m),{},{components:a})):n.createElement(c,l({ref:t},m))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=k;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},953:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var n=a(7462),i=a(3366),r=(a(7294),a(4137)),l=["components"],o={title:"Constants"},s=void 0,p={unversionedId:"kusama/constants",id:"kusama/constants",title:"Constants",description:"The following sections contain the module constants, also known as parameter types. These can only be changed as part of a runtime upgrade. On the api, these are exposed via api.consts...",source:"@site/docs/kusama/constants.md",sourceDirName:"kusama",slug:"/kusama/constants",permalink:"/docs/kusama/constants",draft:!1,editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/kusama/constants.md",tags:[],version:"current",frontMatter:{title:"Constants"},sidebar:"reference",previous:{title:"JSON-RPC",permalink:"/docs/kusama/rpc"},next:{title:"Storage",permalink:"/docs/kusama/storage"}},m={},u=[{value:"auctions",id:"auctions",level:2},{value:"endingPeriod: <code>u32</code>",id:"endingperiod-u32",level:3},{value:"leasePeriodsPerSlot: <code>u32</code>",id:"leaseperiodsperslot-u32",level:3},{value:"sampleLength: <code>u32</code>",id:"samplelength-u32",level:3},{value:"slotRangeCount: <code>u32</code>",id:"slotrangecount-u32",level:3},{value:"babe",id:"babe",level:2},{value:"epochDuration: <code>u64</code>",id:"epochduration-u64",level:3},{value:"expectedBlockTime: <code>u64</code>",id:"expectedblocktime-u64",level:3},{value:"maxAuthorities: <code>u32</code>",id:"maxauthorities-u32",level:3},{value:"maxNominators: <code>u32</code>",id:"maxnominators-u32",level:3},{value:"balances",id:"balances",level:2},{value:"existentialDeposit: <code>u128</code>",id:"existentialdeposit-u128",level:3},{value:"maxFreezes: <code>u32</code>",id:"maxfreezes-u32",level:3},{value:"maxLocks: <code>u32</code>",id:"maxlocks-u32",level:3},{value:"maxReserves: <code>u32</code>",id:"maxreserves-u32",level:3},{value:"beefy",id:"beefy",level:2},{value:"maxAuthorities: <code>u32</code>",id:"maxauthorities-u32-1",level:3},{value:"maxNominators: <code>u32</code>",id:"maxnominators-u32-1",level:3},{value:"maxSetIdSessionEntries: <code>u64</code>",id:"maxsetidsessionentries-u64",level:3},{value:"bounties",id:"bounties",level:2},{value:"bountyDepositBase: <code>u128</code>",id:"bountydepositbase-u128",level:3},{value:"bountyDepositPayoutDelay: <code>u32</code>",id:"bountydepositpayoutdelay-u32",level:3},{value:"bountyUpdatePeriod: <code>u32</code>",id:"bountyupdateperiod-u32",level:3},{value:"bountyValueMinimum: <code>u128</code>",id:"bountyvalueminimum-u128",level:3},{value:"curatorDepositMax: <code>Option&lt;u128&gt;</code>",id:"curatordepositmax-optionu128",level:3},{value:"curatorDepositMin: <code>Option&lt;u128&gt;</code>",id:"curatordepositmin-optionu128",level:3},{value:"curatorDepositMultiplier: <code>Permill</code>",id:"curatordepositmultiplier-permill",level:3},{value:"dataDepositPerByte: <code>u128</code>",id:"datadepositperbyte-u128",level:3},{value:"maximumReasonLength: <code>u32</code>",id:"maximumreasonlength-u32",level:3},{value:"childBounties",id:"childbounties",level:2},{value:"childBountyValueMinimum: <code>u128</code>",id:"childbountyvalueminimum-u128",level:3},{value:"maxActiveChildBountyCount: <code>u32</code>",id:"maxactivechildbountycount-u32",level:3},{value:"claims",id:"claims",level:2},{value:"prefix: <code>Bytes</code>",id:"prefix-bytes",level:3},{value:"convictionVoting",id:"convictionvoting",level:2},{value:"maxVotes: <code>u32</code>",id:"maxvotes-u32",level:3},{value:"voteLockingPeriod: <code>u32</code>",id:"votelockingperiod-u32",level:3},{value:"coretime",id:"coretime",level:2},{value:"brokerId: <code>u32</code>",id:"brokerid-u32",level:3},{value:"brokerPotLocation: <code>StagingXcmV5Junctions</code>",id:"brokerpotlocation-stagingxcmv5junctions",level:3},{value:"crowdloan",id:"crowdloan",level:2},{value:"minContribution: <code>u128</code>",id:"mincontribution-u128",level:3},{value:"palletId: <code>FrameSupportPalletId</code>",id:"palletid-framesupportpalletid",level:3},{value:"removeKeysLimit: <code>u32</code>",id:"removekeyslimit-u32",level:3},{value:"delegatedStaking",id:"delegatedstaking",level:2},{value:"palletId: <code>FrameSupportPalletId</code>",id:"palletid-framesupportpalletid-1",level:3},{value:"slashRewardFraction: <code>Perbill</code>",id:"slashrewardfraction-perbill",level:3},{value:"electionProviderMultiPhase",id:"electionprovidermultiphase",level:2},{value:"betterSignedThreshold: <code>Perbill</code>",id:"bettersignedthreshold-perbill",level:3},{value:"maxWinners: <code>u32</code>",id:"maxwinners-u32",level:3},{value:"minerMaxLength: <code>u32</code>",id:"minermaxlength-u32",level:3},{value:"minerMaxVotesPerVoter: <code>u32</code>",id:"minermaxvotespervoter-u32",level:3},{value:"minerMaxWeight: <code>SpWeightsWeightV2Weight</code>",id:"minermaxweight-spweightsweightv2weight",level:3},{value:"minerMaxWinners: <code>u32</code>",id:"minermaxwinners-u32",level:3},{value:"minerTxPriority: <code>u64</code>",id:"minertxpriority-u64",level:3},{value:"offchainRepeat: <code>u32</code>",id:"offchainrepeat-u32",level:3},{value:"signedDepositByte: <code>u128</code>",id:"signeddepositbyte-u128",level:3},{value:"signedDepositWeight: <code>u128</code>",id:"signeddepositweight-u128",level:3},{value:"signedMaxRefunds: <code>u32</code>",id:"signedmaxrefunds-u32",level:3},{value:"signedMaxSubmissions: <code>u32</code>",id:"signedmaxsubmissions-u32",level:3},{value:"signedMaxWeight: <code>SpWeightsWeightV2Weight</code>",id:"signedmaxweight-spweightsweightv2weight",level:3},{value:"signedRewardBase: <code>u128</code>",id:"signedrewardbase-u128",level:3},{value:"fastUnstake",id:"fastunstake",level:2},{value:"deposit: <code>u128</code>",id:"deposit-u128",level:3},{value:"fellowshipReferenda",id:"fellowshipreferenda",level:2},{value:"alarmInterval: <code>u32</code>",id:"alarminterval-u32",level:3},{value:"maxQueued: <code>u32</code>",id:"maxqueued-u32",level:3},{value:"submissionDeposit: <code>u128</code>",id:"submissiondeposit-u128",level:3},{value:"tracks: <code>Vec&lt;(u16,PalletReferendaTrackDetails)&gt;</code>",id:"tracks-vecu16palletreferendatrackdetails",level:3},{value:"undecidingTimeout: <code>u32</code>",id:"undecidingtimeout-u32",level:3},{value:"grandpa",id:"grandpa",level:2},{value:"maxAuthorities: <code>u32</code>",id:"maxauthorities-u32-2",level:3},{value:"maxNominators: <code>u32</code>",id:"maxnominators-u32-2",level:3},{value:"maxSetIdSessionEntries: <code>u64</code>",id:"maxsetidsessionentries-u64-1",level:3},{value:"indices",id:"indices",level:2},{value:"deposit: <code>u128</code>",id:"deposit-u128-1",level:3},{value:"messageQueue",id:"messagequeue",level:2},{value:"heapSize: <code>u32</code>",id:"heapsize-u32",level:3},{value:"idleMaxServiceWeight: <code>Option&lt;SpWeightsWeightV2Weight&gt;</code>",id:"idlemaxserviceweight-optionspweightsweightv2weight",level:3},{value:"maxStale: <code>u32</code>",id:"maxstale-u32",level:3},{value:"serviceWeight: <code>Option&lt;SpWeightsWeightV2Weight&gt;</code>",id:"serviceweight-optionspweightsweightv2weight",level:3},{value:"multisig",id:"multisig",level:2},{value:"depositBase: <code>u128</code>",id:"depositbase-u128",level:3},{value:"depositFactor: <code>u128</code>",id:"depositfactor-u128",level:3},{value:"maxSignatories: <code>u32</code>",id:"maxsignatories-u32",level:3},{value:"nis",id:"nis",level:2},{value:"basePeriod: <code>u32</code>",id:"baseperiod-u32",level:3},{value:"fifoQueueLen: <code>u32</code>",id:"fifoqueuelen-u32",level:3},{value:"intakePeriod: <code>u32</code>",id:"intakeperiod-u32",level:3},{value:"maxIntakeWeight: <code>SpWeightsWeightV2Weight</code>",id:"maxintakeweight-spweightsweightv2weight",level:3},{value:"maxQueueLen: <code>u32</code>",id:"maxqueuelen-u32",level:3},{value:"minBid: <code>u128</code>",id:"minbid-u128",level:3},{value:"minReceipt: <code>Perquintill</code>",id:"minreceipt-perquintill",level:3},{value:"palletId: <code>FrameSupportPalletId</code>",id:"palletid-framesupportpalletid-2",level:3},{value:"queueCount: <code>u32</code>",id:"queuecount-u32",level:3},{value:"thawThrottle: <code>(Perquintill,u32)</code>",id:"thawthrottle-perquintillu32",level:3},{value:"nisCounterpartBalances",id:"niscounterpartbalances",level:2},{value:"existentialDeposit: <code>u128</code>",id:"existentialdeposit-u128-1",level:3},{value:"maxFreezes: <code>u32</code>",id:"maxfreezes-u32-1",level:3},{value:"maxLocks: <code>u32</code>",id:"maxlocks-u32-1",level:3},{value:"maxReserves: <code>u32</code>",id:"maxreserves-u32-1",level:3},{value:"nominationPools",id:"nominationpools",level:2},{value:"maxPointsToBalance: <code>u8</code>",id:"maxpointstobalance-u8",level:3},{value:"maxUnbonding: <code>u32</code>",id:"maxunbonding-u32",level:3},{value:"palletId: <code>FrameSupportPalletId</code>",id:"palletid-framesupportpalletid-3",level:3},{value:"onDemandAssignmentProvider",id:"ondemandassignmentprovider",level:2},{value:"maxHistoricalRevenue: <code>u32</code>",id:"maxhistoricalrevenue-u32",level:3},{value:"palletId: <code>FrameSupportPalletId</code>",id:"palletid-framesupportpalletid-4",level:3},{value:"trafficDefaultValue: <code>u128</code>",id:"trafficdefaultvalue-u128",level:3},{value:"paras",id:"paras",level:2},{value:"unsignedPriority: <code>u64</code>",id:"unsignedpriority-u64",level:3},{value:"proxy",id:"proxy",level:2},{value:"announcementDepositBase: <code>u128</code>",id:"announcementdepositbase-u128",level:3},{value:"announcementDepositFactor: <code>u128</code>",id:"announcementdepositfactor-u128",level:3},{value:"maxPending: <code>u32</code>",id:"maxpending-u32",level:3},{value:"maxProxies: <code>u32</code>",id:"maxproxies-u32",level:3},{value:"proxyDepositBase: <code>u128</code>",id:"proxydepositbase-u128",level:3},{value:"proxyDepositFactor: <code>u128</code>",id:"proxydepositfactor-u128",level:3},{value:"recovery",id:"recovery",level:2},{value:"configDepositBase: <code>u128</code>",id:"configdepositbase-u128",level:3},{value:"friendDepositFactor: <code>u128</code>",id:"frienddepositfactor-u128",level:3},{value:"maxFriends: <code>u32</code>",id:"maxfriends-u32",level:3},{value:"recoveryDeposit: <code>u128</code>",id:"recoverydeposit-u128",level:3},{value:"referenda",id:"referenda",level:2},{value:"alarmInterval: <code>u32</code>",id:"alarminterval-u32-1",level:3},{value:"maxQueued: <code>u32</code>",id:"maxqueued-u32-1",level:3},{value:"submissionDeposit: <code>u128</code>",id:"submissiondeposit-u128-1",level:3},{value:"tracks: <code>Vec&lt;(u16,PalletReferendaTrackDetails)&gt;</code>",id:"tracks-vecu16palletreferendatrackdetails-1",level:3},{value:"undecidingTimeout: <code>u32</code>",id:"undecidingtimeout-u32-1",level:3},{value:"registrar",id:"registrar",level:2},{value:"dataDepositPerByte: <code>u128</code>",id:"datadepositperbyte-u128-1",level:3},{value:"paraDeposit: <code>u128</code>",id:"paradeposit-u128",level:3},{value:"scheduler",id:"scheduler",level:2},{value:"maximumWeight: <code>SpWeightsWeightV2Weight</code>",id:"maximumweight-spweightsweightv2weight",level:3},{value:"maxScheduledPerBlock: <code>u32</code>",id:"maxscheduledperblock-u32",level:3},{value:"slots",id:"slots",level:2},{value:"leaseOffset: <code>u32</code>",id:"leaseoffset-u32",level:3},{value:"leasePeriod: <code>u32</code>",id:"leaseperiod-u32",level:3},{value:"society",id:"society",level:2},{value:"challengePeriod: <code>u32</code>",id:"challengeperiod-u32",level:3},{value:"claimPeriod: <code>u32</code>",id:"claimperiod-u32",level:3},{value:"graceStrikes: <code>u32</code>",id:"gracestrikes-u32",level:3},{value:"maxBids: <code>u32</code>",id:"maxbids-u32",level:3},{value:"maxLockDuration: <code>u32</code>",id:"maxlockduration-u32",level:3},{value:"maxPayouts: <code>u32</code>",id:"maxpayouts-u32",level:3},{value:"palletId: <code>FrameSupportPalletId</code>",id:"palletid-framesupportpalletid-5",level:3},{value:"periodSpend: <code>u128</code>",id:"periodspend-u128",level:3},{value:"votingPeriod: <code>u32</code>",id:"votingperiod-u32",level:3},{value:"staking",id:"staking",level:2},{value:"bondingDuration: <code>u32</code>",id:"bondingduration-u32",level:3},{value:"historyDepth: <code>u32</code>",id:"historydepth-u32",level:3},{value:"maxExposurePageSize: <code>u32</code>",id:"maxexposurepagesize-u32",level:3},{value:"maxUnlockingChunks: <code>u32</code>",id:"maxunlockingchunks-u32",level:3},{value:"sessionsPerEra: <code>u32</code>",id:"sessionsperera-u32",level:3},{value:"slashDeferDuration: <code>u32</code>",id:"slashdeferduration-u32",level:3},{value:"system",id:"system",level:2},{value:"blockHashCount: <code>u32</code>",id:"blockhashcount-u32",level:3},{value:"blockLength: <code>FrameSystemLimitsBlockLength</code>",id:"blocklength-framesystemlimitsblocklength",level:3},{value:"blockWeights: <code>FrameSystemLimitsBlockWeights</code>",id:"blockweights-framesystemlimitsblockweights",level:3},{value:"dbWeight: <code>SpWeightsRuntimeDbWeight</code>",id:"dbweight-spweightsruntimedbweight",level:3},{value:"ss58Prefix: <code>u16</code>",id:"ss58prefix-u16",level:3},{value:"version: <code>SpVersionRuntimeVersion</code>",id:"version-spversionruntimeversion",level:3},{value:"timestamp",id:"timestamp",level:2},{value:"minimumPeriod: <code>u64</code>",id:"minimumperiod-u64",level:3},{value:"transactionPayment",id:"transactionpayment",level:2},{value:"operationalFeeMultiplier: <code>u8</code>",id:"operationalfeemultiplier-u8",level:3},{value:"treasury",id:"treasury",level:2},{value:"burn: <code>Permill</code>",id:"burn-permill",level:3},{value:"maxApprovals: <code>u32</code>",id:"maxapprovals-u32",level:3},{value:"palletId: <code>FrameSupportPalletId</code>",id:"palletid-framesupportpalletid-6",level:3},{value:"payoutPeriod: <code>u32</code>",id:"payoutperiod-u32",level:3},{value:"potAccount: <code>AccountId32</code>",id:"potaccount-accountid32",level:3},{value:"spendPeriod: <code>u32</code>",id:"spendperiod-u32",level:3},{value:"utility",id:"utility",level:2},{value:"batchedCallsLimit: <code>u32</code>",id:"batchedcallslimit-u32",level:3},{value:"vesting",id:"vesting",level:2},{value:"maxVestingSchedules: <code>u32</code>",id:"maxvestingschedules-u32",level:3},{value:"minVestedTransfer: <code>u128</code>",id:"minvestedtransfer-u128",level:3},{value:"voterList",id:"voterlist",level:2},{value:"bagThresholds: <code>Vec&lt;u64&gt;</code>",id:"bagthresholds-vecu64",level:3},{value:"xcmPallet",id:"xcmpallet",level:2},{value:"advertisedXcmVersion: <code>u32</code>",id:"advertisedxcmversion-u32",level:3}],d={toc:u},k="wrapper";function c(e){var t=e.components,a=(0,i.Z)(e,l);return(0,r.kt)(k,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following sections contain the module constants, also known as parameter types. These can only be changed as part of a runtime upgrade. On the api, these are exposed via ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.<module>.<method>"),". "),(0,r.kt)("p",null,"(NOTE: These were generated from a static/snapshot view of a recent default Kusama runtime. Some items may not be available in older nodes, or in any customized implementations.)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#auctions"},"auctions")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#babe"},"babe")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#balances"},"balances")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#beefy"},"beefy")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#bounties"},"bounties")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#childbounties"},"childBounties")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#claims"},"claims")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#convictionvoting"},"convictionVoting")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#coretime"},"coretime")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#crowdloan"},"crowdloan")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#delegatedstaking"},"delegatedStaking")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#electionprovidermultiphase"},"electionProviderMultiPhase")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#fastunstake"},"fastUnstake")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#fellowshipreferenda"},"fellowshipReferenda")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#grandpa"},"grandpa")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#indices"},"indices")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#messagequeue"},"messageQueue")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#multisig"},"multisig")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#nis"},"nis")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#niscounterpartbalances"},"nisCounterpartBalances")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#nominationpools"},"nominationPools")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#ondemandassignmentprovider"},"onDemandAssignmentProvider")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#paras"},"paras")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#proxy"},"proxy")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#recovery"},"recovery")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#referenda"},"referenda")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#registrar"},"registrar")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#scheduler"},"scheduler")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#slots"},"slots")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#society"},"society")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#staking"},"staking")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#system"},"system")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#timestamp"},"timestamp")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#transactionpayment"},"transactionPayment")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#treasury"},"treasury")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#utility"},"utility")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#vesting"},"vesting")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#voterlist"},"voterList")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#xcmpallet"},"xcmPallet"))))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"auctions"},"auctions"),(0,r.kt)("h3",{id:"endingperiod-u32"},"endingPeriod: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.auctions.endingPeriod")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The number of blocks over which an auction may be retroactively ended. ")),(0,r.kt)("h3",{id:"leaseperiodsperslot-u32"},"leasePeriodsPerSlot: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.auctions.leasePeriodsPerSlot"))),(0,r.kt)("h3",{id:"samplelength-u32"},"sampleLength: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.auctions.sampleLength"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The length of each sample to take during the ending period. "),(0,r.kt)("p",{parentName:"li"}," ",(0,r.kt)("inlineCode",{parentName:"p"},"EndingPeriod")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"SampleLength")," = Total # of Samples "))),(0,r.kt)("h3",{id:"slotrangecount-u32"},"slotRangeCount: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.auctions.slotRangeCount"))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"babe"},"babe"),(0,r.kt)("h3",{id:"epochduration-u64"},"epochDuration: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u64")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.babe.epochDuration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The amount of time, in slots, that each epoch should last.  NOTE: Currently it is not possible to change the epoch duration after  the chain has started. Attempting to do so will brick block production. ")),(0,r.kt)("h3",{id:"expectedblocktime-u64"},"expectedBlockTime: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u64")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.babe.expectedBlockTime")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The expected average block time at which BABE should be creating  blocks. Since BABE is probabilistic it is not trivial to figure out  what the expected average block time should be based on the slot  duration and the security parameter ",(0,r.kt)("inlineCode",{parentName:"li"},"c")," (where ",(0,r.kt)("inlineCode",{parentName:"li"},"1 - c")," represents  the probability of a slot being empty). ")),(0,r.kt)("h3",{id:"maxauthorities-u32"},"maxAuthorities: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.babe.maxAuthorities")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Max number of authorities allowed ")),(0,r.kt)("h3",{id:"maxnominators-u32"},"maxNominators: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.babe.maxNominators")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum number of nominators for each validator. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"balances"},"balances"),(0,r.kt)("h3",{id:"existentialdeposit-u128"},"existentialDeposit: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.balances.existentialDeposit"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO! "),(0,r.kt)("p",{parentName:"li"}," If you ",(0,r.kt)("em",{parentName:"p"},"really")," need it to be zero, you can enable the feature ",(0,r.kt)("inlineCode",{parentName:"p"},"insecure_zero_ed")," for  this pallet. However, you do so at your own risk: this will open up a major DoS vector.  In case you have multiple sources of provider references, you may also get unexpected  behaviour if you set this to zero. "),(0,r.kt)("p",{parentName:"li"}," Bottom line: Do yourself a favour and make it at least one! "))),(0,r.kt)("h3",{id:"maxfreezes-u32"},"maxFreezes: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.balances.maxFreezes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum number of individual freeze locks that can exist on an account at any time. ")),(0,r.kt)("h3",{id:"maxlocks-u32"},"maxLocks: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.balances.maxLocks"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The maximum number of locks that should exist on an account.  Not strictly enforced, but used for weight estimation. "),(0,r.kt)("p",{parentName:"li"}," Use of locks is deprecated in favour of freezes. See ",(0,r.kt)("inlineCode",{parentName:"p"},"https://github.com/paritytech/substrate/pull/12951/")," "))),(0,r.kt)("h3",{id:"maxreserves-u32"},"maxReserves: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.balances.maxReserves"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The maximum number of named reserves that can exist on an account. "),(0,r.kt)("p",{parentName:"li"}," Use of reserves is deprecated in favour of holds. See ",(0,r.kt)("inlineCode",{parentName:"p"},"https://github.com/paritytech/substrate/pull/12951/")," "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"beefy"},"beefy"),(0,r.kt)("h3",{id:"maxauthorities-u32-1"},"maxAuthorities: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.beefy.maxAuthorities")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum number of authorities that can be added. ")),(0,r.kt)("h3",{id:"maxnominators-u32-1"},"maxNominators: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.beefy.maxNominators")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum number of nominators for each validator. ")),(0,r.kt)("h3",{id:"maxsetidsessionentries-u64"},"maxSetIdSessionEntries: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u64")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.beefy.maxSetIdSessionEntries"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The maximum number of entries to keep in the set id to session index mapping. "),(0,r.kt)("p",{parentName:"li"}," Since the ",(0,r.kt)("inlineCode",{parentName:"p"},"SetIdSession")," map is only used for validating equivocations this  value should relate to the bonding duration of whatever staking system is  being used (if any). If equivocation handling is not enabled then this value  can be zero. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"bounties"},"bounties"),(0,r.kt)("h3",{id:"bountydepositbase-u128"},"bountyDepositBase: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.bounties.bountyDepositBase")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The amount held on deposit for placing a bounty proposal. ")),(0,r.kt)("h3",{id:"bountydepositpayoutdelay-u32"},"bountyDepositPayoutDelay: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.bounties.bountyDepositPayoutDelay")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The delay period for which a bounty beneficiary need to wait before claim the payout. ")),(0,r.kt)("h3",{id:"bountyupdateperiod-u32"},"bountyUpdatePeriod: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.bounties.bountyUpdatePeriod"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The time limit for a curator to act before a bounty expires. "),(0,r.kt)("p",{parentName:"li"}," The period that starts when a curator is approved, during which they must execute or  update the bounty via ",(0,r.kt)("inlineCode",{parentName:"p"},"extend_bounty_expiry"),". If missed, the bounty expires, and the  curator may be slashed. If ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockNumberFor::MAX"),", bounties stay active indefinitely,  removing the need for ",(0,r.kt)("inlineCode",{parentName:"p"},"extend_bounty_expiry"),". "))),(0,r.kt)("h3",{id:"bountyvalueminimum-u128"},"bountyValueMinimum: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.bounties.bountyValueMinimum")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Minimum value for a bounty. ")),(0,r.kt)("h3",{id:"curatordepositmax-optionu128"},"curatorDepositMax: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<u128>")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.bounties.curatorDepositMax")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Maximum amount of funds that should be placed in a deposit for making a proposal. ")),(0,r.kt)("h3",{id:"curatordepositmin-optionu128"},"curatorDepositMin: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<u128>")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.bounties.curatorDepositMin")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Minimum amount of funds that should be placed in a deposit for making a proposal. ")),(0,r.kt)("h3",{id:"curatordepositmultiplier-permill"},"curatorDepositMultiplier: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Permill")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.bounties.curatorDepositMultiplier"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The curator deposit is calculated as a percentage of the curator fee. "),(0,r.kt)("p",{parentName:"li"}," This deposit has optional upper and lower bounds with ",(0,r.kt)("inlineCode",{parentName:"p"},"CuratorDepositMax")," and  ",(0,r.kt)("inlineCode",{parentName:"p"},"CuratorDepositMin"),". "))),(0,r.kt)("h3",{id:"datadepositperbyte-u128"},"dataDepositPerByte: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.bounties.dataDepositPerByte")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The amount held on deposit per byte within the tip report reason or bounty description. ")),(0,r.kt)("h3",{id:"maximumreasonlength-u32"},"maximumReasonLength: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.bounties.maximumReasonLength"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    Maximum acceptable reason length. "),(0,r.kt)("p",{parentName:"li"}," Benchmarks depend on this value, be sure to update weights file when changing this value "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"childbounties"},"childBounties"),(0,r.kt)("h3",{id:"childbountyvalueminimum-u128"},"childBountyValueMinimum: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.childBounties.childBountyValueMinimum")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Minimum value for a child-bounty. ")),(0,r.kt)("h3",{id:"maxactivechildbountycount-u32"},"maxActiveChildBountyCount: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.childBounties.maxActiveChildBountyCount")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Maximum number of child bounties that can be added to a parent bounty. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"claims"},"claims"),(0,r.kt)("h3",{id:"prefix-bytes"},"prefix: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.claims.prefix"))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"convictionvoting"},"convictionVoting"),(0,r.kt)("h3",{id:"maxvotes-u32"},"maxVotes: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.convictionVoting.maxVotes"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The maximum number of concurrent votes an account may have. "),(0,r.kt)("p",{parentName:"li"}," Also used to compute weight, an overly large value can lead to extrinsics with large  weight estimation: see ",(0,r.kt)("inlineCode",{parentName:"p"},"delegate")," for instance. "))),(0,r.kt)("h3",{id:"votelockingperiod-u32"},"voteLockingPeriod: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.convictionVoting.voteLockingPeriod"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The minimum period of vote locking. "),(0,r.kt)("p",{parentName:"li"}," It should be no shorter than enactment period to ensure that in the case of an approval,  those successful voters are locked into the consequences that their votes entail. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"coretime"},"coretime"),(0,r.kt)("h3",{id:"brokerid-u32"},"brokerId: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.coretime.brokerId")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The ParaId of the coretime chain. ")),(0,r.kt)("h3",{id:"brokerpotlocation-stagingxcmv5junctions"},"brokerPotLocation: ",(0,r.kt)("inlineCode",{parentName:"h3"},"StagingXcmV5Junctions")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.coretime.brokerPotLocation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The coretime chain pot location. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"crowdloan"},"crowdloan"),(0,r.kt)("h3",{id:"mincontribution-u128"},"minContribution: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.crowdloan.minContribution")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The minimum amount that may be contributed into a crowdloan. Should almost certainly be  at least ",(0,r.kt)("inlineCode",{parentName:"li"},"ExistentialDeposit"),". ")),(0,r.kt)("h3",{id:"palletid-framesupportpalletid"},"palletId: ",(0,r.kt)("inlineCode",{parentName:"h3"},"FrameSupportPalletId")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.crowdloan.palletId")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    ",(0,r.kt)("inlineCode",{parentName:"li"},"PalletId")," for the crowdloan pallet. An appropriate value could be  ",(0,r.kt)("inlineCode",{parentName:"li"},'PalletId(*b"py/cfund")')," ")),(0,r.kt)("h3",{id:"removekeyslimit-u32"},"removeKeysLimit: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.crowdloan.removeKeysLimit")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Max number of storage keys to remove per extrinsic call. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"delegatedstaking"},"delegatedStaking"),(0,r.kt)("h3",{id:"palletid-framesupportpalletid-1"},"palletId: ",(0,r.kt)("inlineCode",{parentName:"h3"},"FrameSupportPalletId")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.delegatedStaking.palletId")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Injected identifier for the pallet. ")),(0,r.kt)("h3",{id:"slashrewardfraction-perbill"},"slashRewardFraction: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Perbill")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.delegatedStaking.slashRewardFraction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Fraction of the slash that is rewarded to the caller of pending slash to the agent. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"electionprovidermultiphase"},"electionProviderMultiPhase"),(0,r.kt)("h3",{id:"bettersignedthreshold-perbill"},"betterSignedThreshold: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Perbill")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.electionProviderMultiPhase.betterSignedThreshold")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),':    The minimum amount of improvement to the solution score that defines a solution as  "better" in the Signed phase. ')),(0,r.kt)("h3",{id:"maxwinners-u32"},"maxWinners: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.electionProviderMultiPhase.maxWinners"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The maximum number of winners that can be elected by this ",(0,r.kt)("inlineCode",{parentName:"p"},"ElectionProvider"),"  implementation. "),(0,r.kt)("p",{parentName:"li"}," Note: This must always be greater or equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"T::DataProvider::desired_targets()"),". "))),(0,r.kt)("h3",{id:"minermaxlength-u32"},"minerMaxLength: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.electionProviderMultiPhase.minerMaxLength"))),(0,r.kt)("h3",{id:"minermaxvotespervoter-u32"},"minerMaxVotesPerVoter: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.electionProviderMultiPhase.minerMaxVotesPerVoter"))),(0,r.kt)("h3",{id:"minermaxweight-spweightsweightv2weight"},"minerMaxWeight: ",(0,r.kt)("inlineCode",{parentName:"h3"},"SpWeightsWeightV2Weight")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.electionProviderMultiPhase.minerMaxWeight"))),(0,r.kt)("h3",{id:"minermaxwinners-u32"},"minerMaxWinners: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.electionProviderMultiPhase.minerMaxWinners"))),(0,r.kt)("h3",{id:"minertxpriority-u64"},"minerTxPriority: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u64")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.electionProviderMultiPhase.minerTxPriority")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The priority of the unsigned transaction submitted in the unsigned-phase ")),(0,r.kt)("h3",{id:"offchainrepeat-u32"},"offchainRepeat: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.electionProviderMultiPhase.offchainRepeat"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The repeat threshold of the offchain worker. "),(0,r.kt)("p",{parentName:"li"}," For example, if it is 5, that means that at least 5 blocks will elapse between attempts  to submit the worker's solution. "))),(0,r.kt)("h3",{id:"signeddepositbyte-u128"},"signedDepositByte: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.electionProviderMultiPhase.signedDepositByte")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Per-byte deposit for a signed solution. ")),(0,r.kt)("h3",{id:"signeddepositweight-u128"},"signedDepositWeight: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.electionProviderMultiPhase.signedDepositWeight")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Per-weight deposit for a signed solution. ")),(0,r.kt)("h3",{id:"signedmaxrefunds-u32"},"signedMaxRefunds: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.electionProviderMultiPhase.signedMaxRefunds")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum amount of unchecked solutions to refund the call fee for. ")),(0,r.kt)("h3",{id:"signedmaxsubmissions-u32"},"signedMaxSubmissions: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.electionProviderMultiPhase.signedMaxSubmissions"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    Maximum number of signed submissions that can be queued. "),(0,r.kt)("p",{parentName:"li"}," It is best to avoid adjusting this during an election, as it impacts downstream data  structures. In particular, ",(0,r.kt)("inlineCode",{parentName:"p"},"SignedSubmissionIndices<T>")," is bounded on this value. If you  update this value during an election, you ",(0,r.kt)("em",{parentName:"p"},"must")," ensure that  ",(0,r.kt)("inlineCode",{parentName:"p"},"SignedSubmissionIndices.len()")," is less than or equal to the new value. Otherwise,  attempts to submit new solutions may cause a runtime panic. "))),(0,r.kt)("h3",{id:"signedmaxweight-spweightsweightv2weight"},"signedMaxWeight: ",(0,r.kt)("inlineCode",{parentName:"h3"},"SpWeightsWeightV2Weight")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.electionProviderMultiPhase.signedMaxWeight"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    Maximum weight of a signed solution. "),(0,r.kt)("p",{parentName:"li"}," If ","[",(0,r.kt)("inlineCode",{parentName:"p"},"Config::MinerConfig"),"]"," is being implemented to submit signed solutions (outside of  this pallet), then ","[",(0,r.kt)("inlineCode",{parentName:"p"},"MinerConfig::solution_weight"),"]"," is used to compare against  this value. "))),(0,r.kt)("h3",{id:"signedrewardbase-u128"},"signedRewardBase: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.electionProviderMultiPhase.signedRewardBase")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Base reward for a signed solution ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"fastunstake"},"fastUnstake"),(0,r.kt)("h3",{id:"deposit-u128"},"deposit: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.fastUnstake.deposit")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Deposit to take for unstaking, to make sure we're able to slash the it in order to cover  the costs of resources on unsuccessful unstake. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"fellowshipreferenda"},"fellowshipReferenda"),(0,r.kt)("h3",{id:"alarminterval-u32"},"alarmInterval: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.fellowshipReferenda.alarmInterval")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Quantization level for the referendum wakeup scheduler. A higher number will result in  fewer storage reads/writes needed for smaller voters, but also result in delays to the  automatic referendum status changes. Explicit servicing instructions are unaffected. ")),(0,r.kt)("h3",{id:"maxqueued-u32"},"maxQueued: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.fellowshipReferenda.maxQueued")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Maximum size of the referendum queue for a single track. ")),(0,r.kt)("h3",{id:"submissiondeposit-u128"},"submissionDeposit: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.fellowshipReferenda.submissionDeposit")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The minimum amount to be used as a deposit for a public referendum proposal. ")),(0,r.kt)("h3",{id:"tracks-vecu16palletreferendatrackdetails"},"tracks: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<(u16,PalletReferendaTrackDetails)>")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.fellowshipReferenda.tracks"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    A list of tracks. "),(0,r.kt)("p",{parentName:"li"}," Note: if the tracks are dynamic, the value in the static metadata might be inaccurate. "))),(0,r.kt)("h3",{id:"undecidingtimeout-u32"},"undecidingTimeout: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.fellowshipReferenda.undecidingTimeout")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The number of blocks after submission that a referendum must begin being decided by.  Once this passes, then anyone may cancel the referendum. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"grandpa"},"grandpa"),(0,r.kt)("h3",{id:"maxauthorities-u32-2"},"maxAuthorities: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.grandpa.maxAuthorities")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Max Authorities in use ")),(0,r.kt)("h3",{id:"maxnominators-u32-2"},"maxNominators: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.grandpa.maxNominators")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum number of nominators for each validator. ")),(0,r.kt)("h3",{id:"maxsetidsessionentries-u64-1"},"maxSetIdSessionEntries: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u64")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.grandpa.maxSetIdSessionEntries"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The maximum number of entries to keep in the set id to session index mapping. "),(0,r.kt)("p",{parentName:"li"}," Since the ",(0,r.kt)("inlineCode",{parentName:"p"},"SetIdSession")," map is only used for validating equivocations this  value should relate to the bonding duration of whatever staking system is  being used (if any). If equivocation handling is not enabled then this value  can be zero. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"indices"},"indices"),(0,r.kt)("h3",{id:"deposit-u128-1"},"deposit: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.indices.deposit")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The deposit needed for reserving an index. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"messagequeue"},"messageQueue"),(0,r.kt)("h3",{id:"heapsize-u32"},"heapSize: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.messageQueue.heapSize"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The size of the page; this implies the maximum message size which can be sent. "),(0,r.kt)("p",{parentName:"li"}," A good value depends on the expected message sizes, their weights, the weight that is  available for processing them and the maximal needed message size. The maximal message  size is slightly lower than this as defined by ","[",(0,r.kt)("inlineCode",{parentName:"p"},"MaxMessageLenOf"),"]",". "))),(0,r.kt)("h3",{id:"idlemaxserviceweight-optionspweightsweightv2weight"},"idleMaxServiceWeight: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<SpWeightsWeightV2Weight>")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.messageQueue.idleMaxServiceWeight"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The maximum amount of weight (if any) to be used from remaining weight ",(0,r.kt)("inlineCode",{parentName:"p"},"on_idle")," which  should be provided to the message queue for servicing enqueued items ",(0,r.kt)("inlineCode",{parentName:"p"},"on_idle"),".  Useful for parachains to process messages at the same block they are received. "),(0,r.kt)("p",{parentName:"li"}," If ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),", it will not call ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceQueues::service_queues")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"on_idle"),". "))),(0,r.kt)("h3",{id:"maxstale-u32"},"maxStale: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.messageQueue.maxStale")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum number of stale pages (i.e. of overweight messages) allowed before culling  can happen. Once there are more stale pages than this, then historical pages may be  dropped, even if they contain unprocessed overweight messages. ")),(0,r.kt)("h3",{id:"serviceweight-optionspweightsweightv2weight"},"serviceWeight: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<SpWeightsWeightV2Weight>")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.messageQueue.serviceWeight"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The amount of weight (if any) which should be provided to the message queue for  servicing enqueued items ",(0,r.kt)("inlineCode",{parentName:"p"},"on_initialize"),". "),(0,r.kt)("p",{parentName:"li"}," This may be legitimately ",(0,r.kt)("inlineCode",{parentName:"p"},"None")," in the case that you will call  ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceQueues::service_queues")," manually or set ","[",(0,r.kt)("inlineCode",{parentName:"p"},"Self::IdleMaxServiceWeight"),"]"," to have  it run in ",(0,r.kt)("inlineCode",{parentName:"p"},"on_idle"),". "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"multisig"},"multisig"),(0,r.kt)("h3",{id:"depositbase-u128"},"depositBase: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.multisig.depositBase"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The base amount of currency needed to reserve for creating a multisig execution or to  store a dispatch call for later. "),(0,r.kt)("p",{parentName:"li"}," This is held for an additional storage item whose value size is  ",(0,r.kt)("inlineCode",{parentName:"p"},"4 + sizeof((BlockNumber, Balance, AccountId))")," bytes and whose key size is  ",(0,r.kt)("inlineCode",{parentName:"p"},"32 + sizeof(AccountId)")," bytes. "))),(0,r.kt)("h3",{id:"depositfactor-u128"},"depositFactor: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.multisig.depositFactor"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The amount of currency needed per unit threshold when creating a multisig execution. "),(0,r.kt)("p",{parentName:"li"}," This is held for adding 32 bytes more into a pre-existing storage value. "))),(0,r.kt)("h3",{id:"maxsignatories-u32"},"maxSignatories: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.multisig.maxSignatories")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum amount of signatories allowed in the multisig. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"nis"},"nis"),(0,r.kt)("h3",{id:"baseperiod-u32"},"basePeriod: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.nis.basePeriod")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The base period for the duration queues. This is the common multiple across all  supported freezing durations that can be bid upon. ")),(0,r.kt)("h3",{id:"fifoqueuelen-u32"},"fifoQueueLen: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.nis.fifoQueueLen"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    Portion of the queue which is free from ordering and just a FIFO. "),(0,r.kt)("p",{parentName:"li"}," Must be no greater than ",(0,r.kt)("inlineCode",{parentName:"p"},"MaxQueueLen"),". "))),(0,r.kt)("h3",{id:"intakeperiod-u32"},"intakePeriod: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.nis.intakePeriod"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The number of blocks between consecutive attempts to dequeue bids and create receipts. "),(0,r.kt)("p",{parentName:"li"}," A larger value results in fewer storage hits each block, but a slower period to get to  the target. "))),(0,r.kt)("h3",{id:"maxintakeweight-spweightsweightv2weight"},"maxIntakeWeight: ",(0,r.kt)("inlineCode",{parentName:"h3"},"SpWeightsWeightV2Weight")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.nis.maxIntakeWeight")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum amount of bids that can consolidated into receipts in a single intake. A  larger value here means less of the block available for transactions should there be a  glut of bids. ")),(0,r.kt)("h3",{id:"maxqueuelen-u32"},"maxQueueLen: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.nis.maxQueueLen"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    Maximum number of items that may be in each duration queue. "),(0,r.kt)("p",{parentName:"li"}," Must be larger than zero. "))),(0,r.kt)("h3",{id:"minbid-u128"},"minBid: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.nis.minBid"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The minimum amount of funds that may be placed in a bid. Note that this  does not actually limit the amount which may be represented in a receipt since bids may  be split up by the system. "),(0,r.kt)("p",{parentName:"li"}," It should be at least big enough to ensure that there is no possible storage spam attack  or queue-filling attack. "))),(0,r.kt)("h3",{id:"minreceipt-perquintill"},"minReceipt: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Perquintill")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.nis.minReceipt")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The minimum amount of funds which may intentionally be left remaining under a single  receipt. ")),(0,r.kt)("h3",{id:"palletid-framesupportpalletid-2"},"palletId: ",(0,r.kt)("inlineCode",{parentName:"h3"},"FrameSupportPalletId")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.nis.palletId")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The treasury's pallet id, used for deriving its sovereign account ID. ")),(0,r.kt)("h3",{id:"queuecount-u32"},"queueCount: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.nis.queueCount")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Number of duration queues in total. This sets the maximum duration supported, which is  this value multiplied by ",(0,r.kt)("inlineCode",{parentName:"li"},"Period"),". ")),(0,r.kt)("h3",{id:"thawthrottle-perquintillu32"},"thawThrottle: ",(0,r.kt)("inlineCode",{parentName:"h3"},"(Perquintill,u32)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.nis.thawThrottle")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum proportion which may be thawed and the period over which it is reset. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"niscounterpartbalances"},"nisCounterpartBalances"),(0,r.kt)("h3",{id:"existentialdeposit-u128-1"},"existentialDeposit: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.nisCounterpartBalances.existentialDeposit"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO! "),(0,r.kt)("p",{parentName:"li"}," If you ",(0,r.kt)("em",{parentName:"p"},"really")," need it to be zero, you can enable the feature ",(0,r.kt)("inlineCode",{parentName:"p"},"insecure_zero_ed")," for  this pallet. However, you do so at your own risk: this will open up a major DoS vector.  In case you have multiple sources of provider references, you may also get unexpected  behaviour if you set this to zero. "),(0,r.kt)("p",{parentName:"li"}," Bottom line: Do yourself a favour and make it at least one! "))),(0,r.kt)("h3",{id:"maxfreezes-u32-1"},"maxFreezes: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.nisCounterpartBalances.maxFreezes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum number of individual freeze locks that can exist on an account at any time. ")),(0,r.kt)("h3",{id:"maxlocks-u32-1"},"maxLocks: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.nisCounterpartBalances.maxLocks"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The maximum number of locks that should exist on an account.  Not strictly enforced, but used for weight estimation. "),(0,r.kt)("p",{parentName:"li"}," Use of locks is deprecated in favour of freezes. See ",(0,r.kt)("inlineCode",{parentName:"p"},"https://github.com/paritytech/substrate/pull/12951/")," "))),(0,r.kt)("h3",{id:"maxreserves-u32-1"},"maxReserves: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.nisCounterpartBalances.maxReserves"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The maximum number of named reserves that can exist on an account. "),(0,r.kt)("p",{parentName:"li"}," Use of reserves is deprecated in favour of holds. See ",(0,r.kt)("inlineCode",{parentName:"p"},"https://github.com/paritytech/substrate/pull/12951/")," "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"nominationpools"},"nominationPools"),(0,r.kt)("h3",{id:"maxpointstobalance-u8"},"maxPointsToBalance: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u8")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.nominationPools.maxPointsToBalance"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The maximum pool points-to-balance ratio that an ",(0,r.kt)("inlineCode",{parentName:"p"},"open")," pool can have. "),(0,r.kt)("p",{parentName:"li"}," This is important in the event slashing takes place and the pool's points-to-balance  ratio becomes disproportional. "),(0,r.kt)("p",{parentName:"li"}," Moreover, this relates to the ",(0,r.kt)("inlineCode",{parentName:"p"},"RewardCounter")," type as well, as the arithmetic operations  are a function of number of points, and by setting this value to e.g. 10, you ensure  that the total number of points in the system are at most 10 times the total_issuance of  the chain, in the absolute worse case. "),(0,r.kt)("p",{parentName:"li"}," For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.  Such a scenario would also be the equivalent of the pool being 90% slashed. "))),(0,r.kt)("h3",{id:"maxunbonding-u32"},"maxUnbonding: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.nominationPools.maxUnbonding")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum number of simultaneous unbonding chunks that can exist per member. ")),(0,r.kt)("h3",{id:"palletid-framesupportpalletid-3"},"palletId: ",(0,r.kt)("inlineCode",{parentName:"h3"},"FrameSupportPalletId")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.nominationPools.palletId")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The nomination pool's pallet id. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"ondemandassignmentprovider"},"onDemandAssignmentProvider"),(0,r.kt)("h3",{id:"maxhistoricalrevenue-u32"},"maxHistoricalRevenue: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.onDemandAssignmentProvider.maxHistoricalRevenue")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum number of blocks some historical revenue  information stored for. ")),(0,r.kt)("h3",{id:"palletid-framesupportpalletid-4"},"palletId: ",(0,r.kt)("inlineCode",{parentName:"h3"},"FrameSupportPalletId")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.onDemandAssignmentProvider.palletId")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Identifier for the internal revenue balance. ")),(0,r.kt)("h3",{id:"trafficdefaultvalue-u128"},"trafficDefaultValue: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.onDemandAssignmentProvider.trafficDefaultValue")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The default value for the spot traffic multiplier. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"paras"},"paras"),(0,r.kt)("h3",{id:"unsignedpriority-u64"},"unsignedPriority: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u64")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.paras.unsignedPriority"))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"proxy"},"proxy"),(0,r.kt)("h3",{id:"announcementdepositbase-u128"},"announcementDepositBase: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.proxy.announcementDepositBase"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The base amount of currency needed to reserve for creating an announcement. "),(0,r.kt)("p",{parentName:"li"}," This is held when a new storage item holding a ",(0,r.kt)("inlineCode",{parentName:"p"},"Balance")," is created (typically 16  bytes). "))),(0,r.kt)("h3",{id:"announcementdepositfactor-u128"},"announcementDepositFactor: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.proxy.announcementDepositFactor"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The amount of currency needed per announcement made. "),(0,r.kt)("p",{parentName:"li"}," This is held for adding an ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountId"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Hash")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockNumber")," (typically 68 bytes)  into a pre-existing storage value. "))),(0,r.kt)("h3",{id:"maxpending-u32"},"maxPending: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.proxy.maxPending")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum amount of time-delayed announcements that are allowed to be pending. ")),(0,r.kt)("h3",{id:"maxproxies-u32"},"maxProxies: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.proxy.maxProxies")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum amount of proxies allowed for a single account. ")),(0,r.kt)("h3",{id:"proxydepositbase-u128"},"proxyDepositBase: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.proxy.proxyDepositBase"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The base amount of currency needed to reserve for creating a proxy. "),(0,r.kt)("p",{parentName:"li"}," This is held for an additional storage item whose value size is  ",(0,r.kt)("inlineCode",{parentName:"p"},"sizeof(Balance)")," bytes and whose key size is ",(0,r.kt)("inlineCode",{parentName:"p"},"sizeof(AccountId)")," bytes. "))),(0,r.kt)("h3",{id:"proxydepositfactor-u128"},"proxyDepositFactor: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.proxy.proxyDepositFactor"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The amount of currency needed per proxy added. "),(0,r.kt)("p",{parentName:"li"}," This is held for adding 32 bytes plus an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"ProxyType")," more into a  pre-existing storage value. Thus, when configuring ",(0,r.kt)("inlineCode",{parentName:"p"},"ProxyDepositFactor")," one should take  into account ",(0,r.kt)("inlineCode",{parentName:"p"},"32 + proxy_type.encode().len()")," bytes of data. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"recovery"},"recovery"),(0,r.kt)("h3",{id:"configdepositbase-u128"},"configDepositBase: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.recovery.configDepositBase"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The base amount of currency needed to reserve for creating a recovery configuration. "),(0,r.kt)("p",{parentName:"li"}," This is held for an additional storage item whose value size is  ",(0,r.kt)("inlineCode",{parentName:"p"},"2 + sizeof(BlockNumber, Balance)")," bytes. "))),(0,r.kt)("h3",{id:"frienddepositfactor-u128"},"friendDepositFactor: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.recovery.friendDepositFactor"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The amount of currency needed per additional user when creating a recovery  configuration. "),(0,r.kt)("p",{parentName:"li"}," This is held for adding ",(0,r.kt)("inlineCode",{parentName:"p"},"sizeof(AccountId)")," bytes more into a pre-existing storage  value. "))),(0,r.kt)("h3",{id:"maxfriends-u32"},"maxFriends: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.recovery.maxFriends"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The maximum amount of friends allowed in a recovery configuration. "),(0,r.kt)("p",{parentName:"li"}," NOTE: The threshold programmed in this Pallet uses u16, so it does  not really make sense to have a limit here greater than u16::MAX.  But also, that is a lot more than you should probably set this value  to anyway... "))),(0,r.kt)("h3",{id:"recoverydeposit-u128"},"recoveryDeposit: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.recovery.recoveryDeposit"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The base amount of currency needed to reserve for starting a recovery. "),(0,r.kt)("p",{parentName:"li"}," This is primarily held for deterring malicious recovery attempts, and should  have a value large enough that a bad actor would choose not to place this  deposit. It also acts to fund additional storage item whose value size is  ",(0,r.kt)("inlineCode",{parentName:"p"},"sizeof(BlockNumber, Balance + T * AccountId)")," bytes. Where T is a configurable  threshold. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"referenda"},"referenda"),(0,r.kt)("h3",{id:"alarminterval-u32-1"},"alarmInterval: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.referenda.alarmInterval")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Quantization level for the referendum wakeup scheduler. A higher number will result in  fewer storage reads/writes needed for smaller voters, but also result in delays to the  automatic referendum status changes. Explicit servicing instructions are unaffected. ")),(0,r.kt)("h3",{id:"maxqueued-u32-1"},"maxQueued: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.referenda.maxQueued")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Maximum size of the referendum queue for a single track. ")),(0,r.kt)("h3",{id:"submissiondeposit-u128-1"},"submissionDeposit: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.referenda.submissionDeposit")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The minimum amount to be used as a deposit for a public referendum proposal. ")),(0,r.kt)("h3",{id:"tracks-vecu16palletreferendatrackdetails-1"},"tracks: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<(u16,PalletReferendaTrackDetails)>")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.referenda.tracks"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    A list of tracks. "),(0,r.kt)("p",{parentName:"li"}," Note: if the tracks are dynamic, the value in the static metadata might be inaccurate. "))),(0,r.kt)("h3",{id:"undecidingtimeout-u32-1"},"undecidingTimeout: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.referenda.undecidingTimeout")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The number of blocks after submission that a referendum must begin being decided by.  Once this passes, then anyone may cancel the referendum. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"registrar"},"registrar"),(0,r.kt)("h3",{id:"datadepositperbyte-u128-1"},"dataDepositPerByte: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.registrar.dataDepositPerByte")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The deposit to be paid per byte stored on chain. ")),(0,r.kt)("h3",{id:"paradeposit-u128"},"paraDeposit: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.registrar.paraDeposit")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The deposit to be paid to run a on-demand parachain.  This should include the cost for storing the genesis head and validation code. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"scheduler"},"scheduler"),(0,r.kt)("h3",{id:"maximumweight-spweightsweightv2weight"},"maximumWeight: ",(0,r.kt)("inlineCode",{parentName:"h3"},"SpWeightsWeightV2Weight")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.scheduler.maximumWeight")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum weight that may be scheduled per block for any dispatchables. ")),(0,r.kt)("h3",{id:"maxscheduledperblock-u32"},"maxScheduledPerBlock: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.scheduler.maxScheduledPerBlock"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The maximum number of scheduled calls in the queue for a single block. "),(0,r.kt)("p",{parentName:"li"}," NOTE:  + Dependent pallets' benchmarks might require a higher limit for the setting. Set a  higher limit under ",(0,r.kt)("inlineCode",{parentName:"p"},"runtime-benchmarks")," feature. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"slots"},"slots"),(0,r.kt)("h3",{id:"leaseoffset-u32"},"leaseOffset: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.slots.leaseOffset")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The number of blocks to offset each lease period by. ")),(0,r.kt)("h3",{id:"leaseperiod-u32"},"leasePeriod: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.slots.leasePeriod")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The number of blocks over which a single period lasts. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"society"},"society"),(0,r.kt)("h3",{id:"challengeperiod-u32"},"challengePeriod: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.society.challengePeriod")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The number of blocks between membership challenges. ")),(0,r.kt)("h3",{id:"claimperiod-u32"},"claimPeriod: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.society.claimPeriod")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The number of blocks on which new candidates can claim their membership and be the  named head. ")),(0,r.kt)("h3",{id:"gracestrikes-u32"},"graceStrikes: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.society.graceStrikes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum number of strikes before a member gets funds slashed. ")),(0,r.kt)("h3",{id:"maxbids-u32"},"maxBids: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.society.maxBids")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum number of bids at once. ")),(0,r.kt)("h3",{id:"maxlockduration-u32"},"maxLockDuration: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.society.maxLockDuration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum duration of the payout lock. ")),(0,r.kt)("h3",{id:"maxpayouts-u32"},"maxPayouts: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.society.maxPayouts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum number of payouts a member may have waiting unclaimed. ")),(0,r.kt)("h3",{id:"palletid-framesupportpalletid-5"},"palletId: ",(0,r.kt)("inlineCode",{parentName:"h3"},"FrameSupportPalletId")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.society.palletId")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The societies's pallet id ")),(0,r.kt)("h3",{id:"periodspend-u128"},"periodSpend: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.society.periodSpend")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The amount of incentive paid within each period. Doesn't include VoterTip. ")),(0,r.kt)("h3",{id:"votingperiod-u32"},"votingPeriod: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.society.votingPeriod")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The number of blocks on which new candidates should be voted on. Together with  ",(0,r.kt)("inlineCode",{parentName:"li"},"ClaimPeriod"),", this sums to the number of blocks between candidate intake periods. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"staking"},"staking"),(0,r.kt)("h3",{id:"bondingduration-u32"},"bondingDuration: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.staking.bondingDuration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Number of eras that staked funds must remain bonded for. ")),(0,r.kt)("h3",{id:"historydepth-u32"},"historyDepth: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.staking.historyDepth"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    Number of eras to keep in history. "),(0,r.kt)("p",{parentName:"li"}," Following information is kept for eras in ",(0,r.kt)("inlineCode",{parentName:"p"},"[current_era -  HistoryDepth, current_era]"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"ErasStakers"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ErasStakersClipped"),",  ",(0,r.kt)("inlineCode",{parentName:"p"},"ErasValidatorPrefs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ErasValidatorReward"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ErasRewardPoints"),",  ",(0,r.kt)("inlineCode",{parentName:"p"},"ErasTotalStake"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ErasStartSessionIndex"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ClaimedRewards"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ErasStakersPaged"),",  ",(0,r.kt)("inlineCode",{parentName:"p"},"ErasStakersOverview"),". "),(0,r.kt)("p",{parentName:"li"}," Must be more than the number of eras delayed by session.  I.e. active era must always be in history. I.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"active_era >  current_era - history_depth")," must be guaranteed. "),(0,r.kt)("p",{parentName:"li"}," If migrating an existing pallet from storage value to config value,  this should be set to same value or greater as in storage. "),(0,r.kt)("p",{parentName:"li"}," Note: ",(0,r.kt)("inlineCode",{parentName:"p"},"HistoryDepth")," is used as the upper bound for the ",(0,r.kt)("inlineCode",{parentName:"p"},"BoundedVec"),"  item ",(0,r.kt)("inlineCode",{parentName:"p"},"StakingLedger.legacy_claimed_rewards"),". Setting this value lower than  the existing value can lead to inconsistencies in the  ",(0,r.kt)("inlineCode",{parentName:"p"},"StakingLedger")," and will need to be handled properly in a migration.  The test ",(0,r.kt)("inlineCode",{parentName:"p"},"reducing_history_depth_abrupt")," shows this effect. "))),(0,r.kt)("h3",{id:"maxexposurepagesize-u32"},"maxExposurePageSize: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.staking.maxExposurePageSize"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The maximum size of each ",(0,r.kt)("inlineCode",{parentName:"p"},"T::ExposurePage"),". "),(0,r.kt)("p",{parentName:"li"}," An ",(0,r.kt)("inlineCode",{parentName:"p"},"ExposurePage")," is weakly bounded to a maximum of ",(0,r.kt)("inlineCode",{parentName:"p"},"MaxExposurePageSize"),"  nominators. "),(0,r.kt)("p",{parentName:"li"}," For older non-paged exposure, a reward payout was restricted to the top  ",(0,r.kt)("inlineCode",{parentName:"p"},"MaxExposurePageSize")," nominators. This is to limit the i/o cost for the  nominator payout. "),(0,r.kt)("p",{parentName:"li"}," Note: ",(0,r.kt)("inlineCode",{parentName:"p"},"MaxExposurePageSize")," is used to bound ",(0,r.kt)("inlineCode",{parentName:"p"},"ClaimedRewards")," and is unsafe to reduce  without handling it in a migration. "))),(0,r.kt)("h3",{id:"maxunlockingchunks-u32"},"maxUnlockingChunks: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.staking.maxUnlockingChunks"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The maximum number of ",(0,r.kt)("inlineCode",{parentName:"p"},"unlocking")," chunks a ","[",(0,r.kt)("inlineCode",{parentName:"p"},"StakingLedger"),"]"," can  have. Effectively determines how many unique eras a staker may be  unbonding in. "),(0,r.kt)("p",{parentName:"li"}," Note: ",(0,r.kt)("inlineCode",{parentName:"p"},"MaxUnlockingChunks")," is used as the upper bound for the  ",(0,r.kt)("inlineCode",{parentName:"p"},"BoundedVec")," item ",(0,r.kt)("inlineCode",{parentName:"p"},"StakingLedger.unlocking"),". Setting this value  lower than the existing value can lead to inconsistencies in the  ",(0,r.kt)("inlineCode",{parentName:"p"},"StakingLedger")," and will need to be handled properly in a runtime  migration. The test ",(0,r.kt)("inlineCode",{parentName:"p"},"reducing_max_unlocking_chunks_abrupt")," shows  this effect. "))),(0,r.kt)("h3",{id:"sessionsperera-u32"},"sessionsPerEra: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.staking.sessionsPerEra")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Number of sessions per era. ")),(0,r.kt)("h3",{id:"slashdeferduration-u32"},"slashDeferDuration: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.staking.slashDeferDuration"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    Number of eras that slashes are deferred by, after computation. "),(0,r.kt)("p",{parentName:"li"}," This should be less than the bonding duration. Set to 0 if slashes  should be applied immediately, without opportunity for intervention. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"system"},"system"),(0,r.kt)("h3",{id:"blockhashcount-u32"},"blockHashCount: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.system.blockHashCount")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Maximum number of block number to block hash mappings to keep (oldest pruned first). ")),(0,r.kt)("h3",{id:"blocklength-framesystemlimitsblocklength"},"blockLength: ",(0,r.kt)("inlineCode",{parentName:"h3"},"FrameSystemLimitsBlockLength")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.system.blockLength")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The maximum length of a block (in bytes). ")),(0,r.kt)("h3",{id:"blockweights-framesystemlimitsblockweights"},"blockWeights: ",(0,r.kt)("inlineCode",{parentName:"h3"},"FrameSystemLimitsBlockWeights")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.system.blockWeights")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Block & extrinsics weights: base values and limits. ")),(0,r.kt)("h3",{id:"dbweight-spweightsruntimedbweight"},"dbWeight: ",(0,r.kt)("inlineCode",{parentName:"h3"},"SpWeightsRuntimeDbWeight")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.system.dbWeight")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The weight of runtime database operations the runtime can invoke. ")),(0,r.kt)("h3",{id:"ss58prefix-u16"},"ss58Prefix: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u16")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.system.ss58Prefix"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The designated SS58 prefix of this chain. "),(0,r.kt)("p",{parentName:"li"},' This replaces the "ss58Format" property declared in the chain spec. Reason is  that the runtime should know about the prefix in order to make use of it as  an identifier of the chain. '))),(0,r.kt)("h3",{id:"version-spversionruntimeversion"},"version: ",(0,r.kt)("inlineCode",{parentName:"h3"},"SpVersionRuntimeVersion")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.system.version")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Get the chain's in-code version. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"timestamp"},"timestamp"),(0,r.kt)("h3",{id:"minimumperiod-u64"},"minimumPeriod: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u64")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.timestamp.minimumPeriod"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The minimum period between blocks. "),(0,r.kt)("p",{parentName:"li"}," Be aware that this is different to the ",(0,r.kt)("em",{parentName:"p"},"expected")," period that the block production  apparatus provides. Your chosen consensus system will generally work with this to  determine a sensible block time. For example, in the Aura pallet it will be double this  period on default settings. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"transactionpayment"},"transactionPayment"),(0,r.kt)("h3",{id:"operationalfeemultiplier-u8"},"operationalFeeMultiplier: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u8")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.transactionPayment.operationalFeeMultiplier"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    A fee multiplier for ",(0,r.kt)("inlineCode",{parentName:"p"},"Operational"),' extrinsics to compute "virtual tip" to boost their  ',(0,r.kt)("inlineCode",{parentName:"p"},"priority")," "),(0,r.kt)("p",{parentName:"li"}," This value is multiplied by the ",(0,r.kt)("inlineCode",{parentName:"p"},"final_fee"),' to obtain a "virtual tip" that is later  added to a tip component in regular ',(0,r.kt)("inlineCode",{parentName:"p"},"priority")," calculations.  It means that a ",(0,r.kt)("inlineCode",{parentName:"p"},"Normal")," transaction can front-run a similarly-sized ",(0,r.kt)("inlineCode",{parentName:"p"},"Operational"),"  extrinsic (with no tip), by including a tip value greater than the virtual tip. "),(0,r.kt)("p",{parentName:"li"}," ``",(0,r.kt)("inlineCode",{parentName:"p"},"rust,ignore  // For "),"Normal`  let priority = priority_calc(tip); "),(0,r.kt)("p",{parentName:"li"}," // For ",(0,r.kt)("inlineCode",{parentName:"p"},"Operational"),"  let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;  let priority = priority_calc(tip + virtual_tip);  ``` "),(0,r.kt)("p",{parentName:"li"}," Note that since we use ",(0,r.kt)("inlineCode",{parentName:"p"},"final_fee")," the multiplier applies also to the regular ",(0,r.kt)("inlineCode",{parentName:"p"},"tip"),"  sent with the transaction. So, not only does the transaction get a priority bump based  on the ",(0,r.kt)("inlineCode",{parentName:"p"},"inclusion_fee"),", but we also amplify the impact of tips applied to ",(0,r.kt)("inlineCode",{parentName:"p"},"Operational"),"  transactions. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"treasury"},"treasury"),(0,r.kt)("h3",{id:"burn-permill"},"burn: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Permill")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.treasury.burn")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Percentage of spare funds (if any) that are burnt per spend period. ")),(0,r.kt)("h3",{id:"maxapprovals-u32"},"maxApprovals: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.treasury.maxApprovals"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    DEPRECATED: associated with ",(0,r.kt)("inlineCode",{parentName:"p"},"spend_local")," call and will be removed in May 2025.  Refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paritytech/polkadot-sdk/pull/5961"},"https://github.com/paritytech/polkadot-sdk/pull/5961")," for migration to ",(0,r.kt)("inlineCode",{parentName:"p"},"spend"),". "),(0,r.kt)("p",{parentName:"li"}," The maximum number of approvals that can wait in the spending queue. "),(0,r.kt)("p",{parentName:"li"}," NOTE: This parameter is also used within the Bounties Pallet extension if enabled. "))),(0,r.kt)("h3",{id:"palletid-framesupportpalletid-6"},"palletId: ",(0,r.kt)("inlineCode",{parentName:"h3"},"FrameSupportPalletId")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.treasury.palletId")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The treasury's pallet id, used for deriving its sovereign account ID. ")),(0,r.kt)("h3",{id:"payoutperiod-u32"},"payoutPeriod: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.treasury.payoutPeriod")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The period during which an approved treasury spend has to be claimed. ")),(0,r.kt)("h3",{id:"potaccount-accountid32"},"potAccount: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.treasury.potAccount")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Gets this pallet's derived pot account. ")),(0,r.kt)("h3",{id:"spendperiod-u32"},"spendPeriod: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.treasury.spendPeriod")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    Period between successive spends. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"utility"},"utility"),(0,r.kt)("h3",{id:"batchedcallslimit-u32"},"batchedCallsLimit: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.utility.batchedCallsLimit")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The limit on the number of batched calls. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"vesting"},"vesting"),(0,r.kt)("h3",{id:"maxvestingschedules-u32"},"maxVestingSchedules: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.vesting.maxVestingSchedules"))),(0,r.kt)("h3",{id:"minvestedtransfer-u128"},"minVestedTransfer: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u128")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.vesting.minVestedTransfer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The minimum amount transferred to call ",(0,r.kt)("inlineCode",{parentName:"li"},"vested_transfer"),". ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"voterlist"},"voterList"),(0,r.kt)("h3",{id:"bagthresholds-vecu64"},"bagThresholds: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<u64>")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.consts.voterList.bagThresholds"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":    The list of thresholds separating the various bags. "),(0,r.kt)("p",{parentName:"li"}," Ids are separated into unsorted bags according to their score. This specifies the  thresholds separating the bags. An id's bag is the largest bag for which the id's score  is less than or equal to its upper threshold. "),(0,r.kt)("p",{parentName:"li"}," When ids are iterated, higher bags are iterated completely before lower bags. This means  that iteration is ",(0,r.kt)("em",{parentName:"p"},"semi-sorted"),": ids of higher score tend to come before ids of lower  score, but peer ids within a particular bag are sorted in insertion order. "),(0,r.kt)("h4",{parentName:"li",id:"expressing-the-constant"},"Expressing the constant"),(0,r.kt)("p",{parentName:"li"}," This constant must be sorted in strictly increasing order. Duplicate items are not  permitted. "),(0,r.kt)("p",{parentName:"li"}," There is an implied upper limit of ",(0,r.kt)("inlineCode",{parentName:"p"},"Score::MAX"),"; that value does not need to be  specified within the bag. For any two threshold lists, if one ends with  ",(0,r.kt)("inlineCode",{parentName:"p"},"Score::MAX"),", the other one does not, and they are otherwise equal, the two  lists will behave identically. "),(0,r.kt)("h4",{parentName:"li",id:"calculation"},"Calculation"),(0,r.kt)("p",{parentName:"li"}," It is recommended to generate the set of thresholds in a geometric series, such that  there exists some constant ratio such that ",(0,r.kt)("inlineCode",{parentName:"p"},"threshold[k + 1] == (threshold[k] *  constant_ratio).max(threshold[k] + 1)")," for all ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),". "),(0,r.kt)("p",{parentName:"li"}," The helpers in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/utils/frame/generate-bags")," module can simplify this calculation. "),(0,r.kt)("h4",{parentName:"li",id:"examples"},"Examples"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"BagThresholds::get().is_empty()"),", then all ids are put into the same bag, and  iteration is strictly in insertion order. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"BagThresholds::get().len() == 64"),", and the thresholds are determined according to the procedure given above, then the constant ratio is equal to 2. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"BagThresholds::get().len() == 200"),", and the thresholds are determined according to the procedure given above, then the constant ratio is approximately equal to 1.248. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If the threshold list begins ",(0,r.kt)("inlineCode",{parentName:"p"},"[1, 2, 3, ...]"),", then an id with score 0 or 1 will fall into bag 0, an id with score 2 will fall into bag 1, etc. "),(0,r.kt)("h4",{parentName:"li",id:"migration"},"Migration"),(0,r.kt)("p",{parentName:"li"},"In the event that this list ever changes, a copy of the old bags list must be retained.  With that ",(0,r.kt)("inlineCode",{parentName:"p"},"List::migrate")," can be called, which will perform the appropriate migration. "))))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"xcmpallet"},"xcmPallet"),(0,r.kt)("h3",{id:"advertisedxcmversion-u32"},"advertisedXcmVersion: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.consts.xcmPallet.advertisedXcmVersion")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    The latest supported version that we advertise. Generally just set it to  ",(0,r.kt)("inlineCode",{parentName:"li"},"pallet_xcm::CurrentXcmVersion"),".")))}c.isMDXComponent=!0}}]);